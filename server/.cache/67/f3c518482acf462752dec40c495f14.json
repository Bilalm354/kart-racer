{"id":"../node_modules/graphql-tools/dist/generate/addResolveFunctionsToSchema.js","dependencies":[{"name":"/Users/bilal/Projects/kart-racer/server/node_modules/graphql-tools/dist/generate/addResolveFunctionsToSchema.js.map","includedInParent":true,"mtime":499162500000},{"name":"/Users/bilal/Projects/kart-racer/server/package.json","includedInParent":true,"mtime":1610848218647},{"name":"/Users/bilal/Projects/kart-racer/server/node_modules/graphql-tools/package.json","includedInParent":true,"mtime":1602017675708},{"name":".","loc":{"line":5,"column":17},"parent":"/Users/bilal/Projects/kart-racer/server/node_modules/graphql-tools/dist/generate/addResolveFunctionsToSchema.js","resolved":"/Users/bilal/Projects/kart-racer/server/node_modules/graphql-tools/dist/generate/index.js"},{"name":"graphql","loc":{"line":3,"column":24},"parent":"/Users/bilal/Projects/kart-racer/server/node_modules/graphql-tools/dist/generate/addResolveFunctionsToSchema.js","resolved":"/Users/bilal/Projects/kart-racer/server/node_modules/graphql/index.mjs"},{"name":"../transforms/transforms","loc":{"line":4,"column":27},"parent":"/Users/bilal/Projects/kart-racer/server/node_modules/graphql-tools/dist/generate/addResolveFunctionsToSchema.js","resolved":"/Users/bilal/Projects/kart-racer/server/node_modules/graphql-tools/dist/transforms/transforms.js"},{"name":"../transforms/ConvertEnumValues","loc":{"line":6,"column":34},"parent":"/Users/bilal/Projects/kart-racer/server/node_modules/graphql-tools/dist/generate/addResolveFunctionsToSchema.js","resolved":"/Users/bilal/Projects/kart-racer/server/node_modules/graphql-tools/dist/transforms/ConvertEnumValues.js"}],"generated":{"js":"Object.defineProperty(exports, \"__esModule\", { value: true });\nvar _1 = require(\".\");\nvar graphql_1 = require(\"graphql\");\nvar transforms_1 = require(\"../transforms/transforms\");\nvar _2 = require(\".\");\nvar ConvertEnumValues_1 = require(\"../transforms/ConvertEnumValues\");\nfunction addResolveFunctionsToSchema(options, legacyInputResolvers, legacyInputValidationOptions) {\n    if (options instanceof graphql_1.GraphQLSchema) {\n        console.warn('The addResolveFunctionsToSchema function takes named options now; see IAddResolveFunctionsToSchemaOptions');\n        options = {\n            schema: options,\n            resolvers: legacyInputResolvers,\n            resolverValidationOptions: legacyInputValidationOptions,\n        };\n    }\n    var schema = options.schema, inputResolvers = options.resolvers, _a = options.resolverValidationOptions, resolverValidationOptions = _a === void 0 ? {} : _a, _b = options.inheritResolversFromInterfaces, inheritResolversFromInterfaces = _b === void 0 ? false : _b;\n    var _c = resolverValidationOptions.allowResolversNotInSchema, allowResolversNotInSchema = _c === void 0 ? false : _c, requireResolversForResolveType = resolverValidationOptions.requireResolversForResolveType;\n    var resolvers = inheritResolversFromInterfaces\n        ? _2.extendResolversFromInterfaces(schema, inputResolvers)\n        : inputResolvers;\n    // Used to map the external value of an enum to its internal value, when\n    // that internal value is provided by a resolver.\n    var enumValueMap = Object.create(null);\n    Object.keys(resolvers).forEach(function (typeName) {\n        var resolverValue = resolvers[typeName];\n        var resolverType = typeof resolverValue;\n        if (resolverType !== 'object' && resolverType !== 'function') {\n            throw new _1.SchemaError(\"\\\"\" + typeName + \"\\\" defined in resolvers, but has invalid value \\\"\" + resolverValue + \"\\\". A resolver's value \" +\n                \"must be of type object or function.\");\n        }\n        var type = schema.getType(typeName);\n        if (!type && typeName !== '__schema') {\n            if (allowResolversNotInSchema) {\n                return;\n            }\n            throw new _1.SchemaError(\"\\\"\" + typeName + \"\\\" defined in resolvers, but not in schema\");\n        }\n        Object.keys(resolverValue).forEach(function (fieldName) {\n            if (fieldName.startsWith('__')) {\n                // this is for isTypeOf and resolveType and all the other stuff.\n                type[fieldName.substring(2)] = resolverValue[fieldName];\n                return;\n            }\n            if (type instanceof graphql_1.GraphQLScalarType) {\n                type[fieldName] = resolverValue[fieldName];\n                return;\n            }\n            if (type instanceof graphql_1.GraphQLEnumType) {\n                if (!type.getValue(fieldName)) {\n                    if (allowResolversNotInSchema) {\n                        return;\n                    }\n                    throw new _1.SchemaError(typeName + \".\" + fieldName + \" was defined in resolvers, but enum is not in schema\");\n                }\n                // We've encountered an enum resolver that is being used to provide an\n                // internal enum value.\n                // Reference: https://www.apollographql.com/docs/graphql-tools/scalars.html#internal-values\n                //\n                // We're storing a map of the current enums external facing value to\n                // its resolver provided internal value. This map is used to transform\n                // the current schema to a new schema that includes enums with the new\n                // internal value.\n                enumValueMap[type.name] = enumValueMap[type.name] || {};\n                enumValueMap[type.name][fieldName] = resolverValue[fieldName];\n                return;\n            }\n            // object type\n            var fields = getFieldsForType(type);\n            if (!fields) {\n                if (allowResolversNotInSchema) {\n                    return;\n                }\n                throw new _1.SchemaError(typeName + \" was defined in resolvers, but it's not an object\");\n            }\n            if (!fields[fieldName]) {\n                if (allowResolversNotInSchema) {\n                    return;\n                }\n                throw new _1.SchemaError(typeName + \".\" + fieldName + \" defined in resolvers, but not in schema\");\n            }\n            var field = fields[fieldName];\n            var fieldResolve = resolverValue[fieldName];\n            if (typeof fieldResolve === 'function') {\n                // for convenience. Allows shorter syntax in resolver definition file\n                setFieldProperties(field, { resolve: fieldResolve });\n            }\n            else {\n                if (typeof fieldResolve !== 'object') {\n                    throw new _1.SchemaError(\"Resolver \" + typeName + \".\" + fieldName + \" must be object or function\");\n                }\n                setFieldProperties(field, fieldResolve);\n            }\n        });\n    });\n    _2.checkForResolveTypeResolver(schema, requireResolversForResolveType);\n    // If there are any enum resolver functions (that are used to return\n    // internal enum values), create a new schema that includes enums with the\n    // new internal facing values.\n    var updatedSchema = transforms_1.applySchemaTransforms(schema, [\n        new ConvertEnumValues_1.default(enumValueMap),\n    ]);\n    return updatedSchema;\n}\nfunction getFieldsForType(type) {\n    if (type instanceof graphql_1.GraphQLObjectType ||\n        type instanceof graphql_1.GraphQLInterfaceType) {\n        return type.getFields();\n    }\n    else {\n        return undefined;\n    }\n}\nfunction setFieldProperties(field, propertiesObj) {\n    Object.keys(propertiesObj).forEach(function (propertyName) {\n        field[propertyName] = propertiesObj[propertyName];\n    });\n}\nexports.default = addResolveFunctionsToSchema;\n"},"sourceMaps":{"js":{"version":3,"file":"addResolveFunctionsToSchema.js","sourceRoot":"","sources":["../../src/generate/addResolveFunctionsToSchema.ts"],"names":[],"mappings":";AAAA,sBAAgC;AAEhC,mCASiB;AAOjB,uDAAiE;AACjE,sBAA+E;AAC/E,qEAAgE;AAEhE,SAAS,2BAA2B,CAClC,OAA4D,EAC5D,oBAAiC,EACjC,4BAAyD;IAEzD,IAAI,OAAO,YAAY,uBAAa,EAAE;QACpC,OAAO,CAAC,IAAI,CACV,2GAA2G,CAC5G,CAAC;QACF,OAAO,GAAG;YACR,MAAM,EAAE,OAAO;YACf,SAAS,EAAE,oBAAoB;YAC/B,yBAAyB,EAAE,4BAA4B;SACxD,CAAC;KACH;IAGC,IAAA,uBAAM,EACN,kCAAyB,EACzB,sCAA8B,EAA9B,mDAA8B,EAC9B,2CAAsC,EAAtC,2DAAsC,CAC5B;IAGV,IAAA,wDAAiC,EAAjC,sDAAiC,EACjC,yFAA8B,CACF;IAE9B,IAAM,SAAS,GAAG,8BAA8B;QAC9C,CAAC,CAAC,gCAA6B,CAAC,MAAM,EAAE,cAAc,CAAC;QACvD,CAAC,CAAC,cAAc,CAAC;IAEnB,wEAAwE;IACxE,iDAAiD;IACjD,IAAM,YAAY,GAAG,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;IAEzC,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,OAAO,CAAC,UAAA,QAAQ;QACrC,IAAM,aAAa,GAAG,SAAS,CAAC,QAAQ,CAAC,CAAC;QAC1C,IAAM,YAAY,GAAG,OAAO,aAAa,CAAC;QAE1C,IAAI,YAAY,KAAK,QAAQ,IAAI,YAAY,KAAK,UAAU,EAAE;YAC5D,MAAM,IAAI,cAAW,CACnB,OAAI,QAAQ,yDAAkD,aAAa,4BAAwB;gBACjG,qCAAqC,CACxC,CAAC;SACH;QAED,IAAM,IAAI,GAAG,MAAM,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;QAEtC,IAAI,CAAC,IAAI,IAAI,QAAQ,KAAK,UAAU,EAAE;YACpC,IAAI,yBAAyB,EAAE;gBAC7B,OAAO;aACR;YAED,MAAM,IAAI,cAAW,CACnB,OAAI,QAAQ,+CAA2C,CACxD,CAAC;SACH;QAED,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC,OAAO,CAAC,UAAA,SAAS;YAC1C,IAAI,SAAS,CAAC,UAAU,CAAC,IAAI,CAAC,EAAE;gBAC9B,gEAAgE;gBAChE,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,GAAG,aAAa,CAAC,SAAS,CAAC,CAAC;gBACxD,OAAO;aACR;YAED,IAAI,IAAI,YAAY,2BAAiB,EAAE;gBACrC,IAAI,CAAC,SAAS,CAAC,GAAG,aAAa,CAAC,SAAS,CAAC,CAAC;gBAC3C,OAAO;aACR;YAED,IAAI,IAAI,YAAY,yBAAe,EAAE;gBACnC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,EAAE;oBAC7B,IAAI,yBAAyB,EAAE;wBAC7B,OAAO;qBACR;oBACD,MAAM,IAAI,cAAW,CAChB,QAAQ,SAAI,SAAS,yDAAsD,CAC/E,CAAC;iBACH;gBAED,sEAAsE;gBACtE,uBAAuB;gBACvB,2FAA2F;gBAC3F,EAAE;gBACF,oEAAoE;gBACpE,sEAAsE;gBACtE,sEAAsE;gBACtE,kBAAkB;gBAClB,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC;gBACxD,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,SAAS,CAAC,GAAG,aAAa,CAAC,SAAS,CAAC,CAAC;gBAC9D,OAAO;aACR;YAED,cAAc;YACd,IAAM,MAAM,GAAG,gBAAgB,CAAC,IAAI,CAAC,CAAC;YACtC,IAAI,CAAC,MAAM,EAAE;gBACX,IAAI,yBAAyB,EAAE;oBAC7B,OAAO;iBACR;gBAED,MAAM,IAAI,cAAW,CAChB,QAAQ,sDAAmD,CAC/D,CAAC;aACH;YAED,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,EAAE;gBACtB,IAAI,yBAAyB,EAAE;oBAC7B,OAAO;iBACR;gBAED,MAAM,IAAI,cAAW,CAChB,QAAQ,SAAI,SAAS,6CAA0C,CACnE,CAAC;aACH;YACD,IAAM,KAAK,GAAG,MAAM,CAAC,SAAS,CAAC,CAAC;YAChC,IAAM,YAAY,GAAG,aAAa,CAAC,SAAS,CAAC,CAAC;YAC9C,IAAI,OAAO,YAAY,KAAK,UAAU,EAAE;gBACtC,qEAAqE;gBACrE,kBAAkB,CAAC,KAAK,EAAE,EAAE,OAAO,EAAE,YAAY,EAAE,CAAC,CAAC;aACtD;iBAAM;gBACL,IAAI,OAAO,YAAY,KAAK,QAAQ,EAAE;oBACpC,MAAM,IAAI,cAAW,CACnB,cAAY,QAAQ,SAAI,SAAS,gCAA6B,CAC/D,CAAC;iBACH;gBACD,kBAAkB,CAAC,KAAK,EAAE,YAAY,CAAC,CAAC;aACzC;QACH,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,8BAA2B,CAAC,MAAM,EAAE,8BAA8B,CAAC,CAAC;IAEpE,oEAAoE;IACpE,0EAA0E;IAC1E,8BAA8B;IAC9B,IAAM,aAAa,GAAG,kCAAqB,CAAC,MAAM,EAAE;QAClD,IAAI,2BAAiB,CAAC,YAAY,CAAC;KACpC,CAAC,CAAC;IAEH,OAAO,aAAa,CAAC;AACvB,CAAC;AAED,SAAS,gBAAgB,CAAC,IAAiB;IACzC,IACE,IAAI,YAAY,2BAAiB;QACjC,IAAI,YAAY,8BAAoB,EACpC;QACA,OAAO,IAAI,CAAC,SAAS,EAAE,CAAC;KACzB;SAAM;QACL,OAAO,SAAS,CAAC;KAClB;AACH,CAAC;AAED,SAAS,kBAAkB,CACzB,KAA6B,EAC7B,aAAqB;IAErB,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC,OAAO,CAAC,UAAA,YAAY;QAC7C,KAAK,CAAC,YAAY,CAAC,GAAG,aAAa,CAAC,YAAY,CAAC,CAAC;IACpD,CAAC,CAAC,CAAC;AACL,CAAC;AAED,kBAAe,2BAA2B,CAAC","sourcesContent":[null]}},"error":null,"hash":"2059b9ba78c742b1272bd7d18c8c1bc5","cacheData":{"env":{}}}
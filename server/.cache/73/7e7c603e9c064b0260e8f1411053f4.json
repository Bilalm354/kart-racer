{"id":"../node_modules/apollo-server-types/dist/index.js","dependencies":[{"name":"/Users/bilal/Projects/kart-racer/server/node_modules/apollo-server-types/dist/index.js.map","includedInParent":true,"mtime":499162500000},{"name":"/Users/bilal/Projects/kart-racer/server/node_modules/apollo-server-types/src/index.ts","includedInParent":true,"mtime":499162500000},{"name":"/Users/bilal/Projects/kart-racer/server/package.json","includedInParent":true,"mtime":1610848218647},{"name":"/Users/bilal/Projects/kart-racer/server/node_modules/apollo-server-types/package.json","includedInParent":true,"mtime":1602017675709},{"name":"graphql","loc":{"line":4,"column":26},"parent":"/Users/bilal/Projects/kart-racer/server/node_modules/apollo-server-types/dist/index.js","resolved":"/Users/bilal/Projects/kart-racer/server/node_modules/graphql/index.mjs"}],"generated":{"js":"\"use strict\";\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function (obj) { return typeof obj; }; } else { _typeof = function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.InvalidGraphQLRequestError = void 0;\n\nvar graphql_1 = require(\"graphql\");\n\nvar InvalidGraphQLRequestError = /*#__PURE__*/function (_graphql_1$GraphQLErr) {\n  _inherits(InvalidGraphQLRequestError, _graphql_1$GraphQLErr);\n\n  var _super = _createSuper(InvalidGraphQLRequestError);\n\n  function InvalidGraphQLRequestError() {\n    _classCallCheck(this, InvalidGraphQLRequestError);\n\n    return _super.apply(this, arguments);\n  }\n\n  return InvalidGraphQLRequestError;\n}(graphql_1.GraphQLError);\n\nexports.InvalidGraphQLRequestError = InvalidGraphQLRequestError;"},"sourceMaps":{"js":{"mappings":[{"source":"../src/index.ts","name":null,"original":{"line":2,"column":0},"generated":{"line":26,"column":0}},{"source":"../src/index.ts","name":null,"original":{"line":2,"column":0},"generated":{"line":26,"column":4}},{"source":"../src/index.ts","name":null,"original":{"line":2,"column":0},"generated":{"line":26,"column":13}},{"source":"../src/index.ts","name":null,"original":{"line":2,"column":0},"generated":{"line":26,"column":16}},{"source":"../src/index.ts","name":null,"original":{"line":2,"column":0},"generated":{"line":26,"column":23}},{"source":"../src/index.ts","name":null,"original":{"line":2,"column":0},"generated":{"line":26,"column":24}},{"source":"../src/index.ts","name":null,"original":{"line":2,"column":0},"generated":{"line":26,"column":33}},{"source":"../src/index.ts","name":null,"original":{"line":2,"column":0},"generated":{"line":26,"column":34}},{"source":"../src/index.ts","name":null,"original":{"line":154,"column":13},"generated":{"line":28,"column":4}},{"source":"../src/index.ts","name":null,"original":{"line":154,"column":48},"generated":{"line":40,"column":2}},{"source":"../src/index.ts","name":null,"original":{"line":154,"column":48},"generated":{"line":40,"column":11}},{"source":"../src/index.ts","name":null,"original":{"line":154,"column":48},"generated":{"line":40,"column":12}},{"source":"../src/index.ts","name":null,"original":{"line":154,"column":0},"generated":{"line":42,"column":0}},{"source":"../src/index.ts","name":null,"original":{"line":154,"column":0},"generated":{"line":42,"column":7}},{"source":"../src/index.ts","name":null,"original":{"line":154,"column":0},"generated":{"line":42,"column":8}},{"source":"../src/index.ts","name":null,"original":{"line":154,"column":0},"generated":{"line":42,"column":34}},{"source":"../src/index.ts","name":null,"original":{"line":154,"column":0},"generated":{"line":42,"column":37}},{"source":"../src/index.ts","name":null,"original":{"line":154,"column":0},"generated":{"line":42,"column":63}}],"sources":{"../src/index.ts":"import { Request, Response } from 'apollo-server-env';\nimport {\n  GraphQLSchema,\n  ValidationContext,\n  ASTVisitor,\n  GraphQLFormattedError,\n  OperationDefinitionNode,\n  DocumentNode,\n  GraphQLError,\n  GraphQLResolveInfo,\n} from 'graphql';\n\n// This seems like it could live in this package too.\nimport { KeyValueCache } from 'apollo-server-caching';\nimport { Trace } from 'apollo-reporting-protobuf';\n\nexport type BaseContext = Record<string, any>;\n\nexport type ValueOrPromise<T> = T | Promise<T>;\nexport type WithRequired<T, K extends keyof T> = T & Required<Pick<T, K>>;\n\n/**\n * It is not recommended to use this `AnyFunction` type further.\n *\n * This is a legacy type which aims to do what its name suggests (be the type\n * for _any_ function) but it should be replaced with something from the\n * TypeScript standard lib.  It doesn't truly cover \"any\" function right now,\n * and in particular doesn't consider `this`.  For now, it has been brought\n * here from the Apollo Server `Dispatcher`, where it was first utilized.\n */\nexport type AnyFunction = (...args: any[]) => any;\n\n/**\n * A map of `AnyFunction`s which are the interface for our plugin API's\n * request listeners. (e.g. `GraphQLRequestListener`s).\n */\nexport type AnyFunctionMap = { [key: string]: AnyFunction | undefined };\n\ntype Mutable<T> = { -readonly [P in keyof T]: T[P] };\n\n // By default, TypeScript uses structural typing (as opposed to nominal typing)\n // Put another way, if it looks like the type and walks like that type, then\n // TypeScript lets it be a type.\n //\n // That's often okay, but it leaves a lot to be desired since a `string` of one\n // type can just be passed in as `string` for that type and TypeScript won't\n // complain.  Flow offers opaque types which solve this, but TypeScript doesn't\n // offer this (yet?).  This Faux-paque type can be used to gain nominal-esque\n // typing, which is incredibly beneficial during re-factors!\n type Fauxpaque<K, T> = K & { __fauxpaque: T };\n\n export type SchemaHash = Fauxpaque<string, 'SchemaHash'>;\n\n// Configuration for how Apollo Server talks to the Apollo registry, as\n// passed to the ApolloServer constructor.\nexport interface ApolloConfigInput {\n  key?: string;\n  graphId?: string;\n  graphVariant?: string;\n}\n\n// Configuration for how Apollo Server talks to the Apollo registry, with\n// some defaults filled in from the ApolloConfigInput passed to the constructor.\nexport interface ApolloConfig {\n  key?: string;\n  keyHash?: string;\n  graphId?: string;\n  graphVariant: string;\n}\n\n export interface GraphQLServiceContext {\n  logger: Logger;\n  schema: GraphQLSchema;\n  schemaHash: SchemaHash;\n  apollo: ApolloConfig;\n  persistedQueries?: {\n    cache: KeyValueCache;\n  };\n  serverlessFramework: boolean;\n  // For backwards compatibility only; prefer to use `apollo`.\n  engine: {\n    serviceID?: string;\n    apiKeyHash?: string;\n  };\n}\n\nexport interface GraphQLRequest {\n  query?: string;\n  operationName?: string;\n  variables?: VariableValues;\n  extensions?: Record<string, any>;\n  http?: Pick<Request, 'url' | 'method' | 'headers'>;\n}\n\nexport type VariableValues = { [name: string]: any };\n\nexport interface GraphQLResponse {\n  data?: Record<string, any> | null;\n  errors?: ReadonlyArray<GraphQLFormattedError>;\n  extensions?: Record<string, any>;\n  http?: Pick<Response, 'headers'> & Partial<Pick<Mutable<Response>, 'status'>>;\n}\n\nexport interface GraphQLRequestMetrics {\n  captureTraces?: boolean;\n  persistedQueryHit?: boolean;\n  persistedQueryRegister?: boolean;\n  responseCacheHit?: boolean;\n  forbiddenOperation?: boolean;\n  registeredOperation?: boolean;\n  startHrTime?: [number, number];\n  queryPlanTrace?: Trace.QueryPlanNode;\n}\n\nexport interface GraphQLRequestContext<TContext = Record<string, any>> {\n  readonly request: GraphQLRequest;\n  readonly response?: GraphQLResponse;\n\n  logger: Logger;\n\n  readonly schema: GraphQLSchema;\n  readonly schemaHash: SchemaHash;\n\n  readonly context: TContext;\n  readonly cache: KeyValueCache;\n\n  readonly queryHash?: string;\n\n  readonly document?: DocumentNode;\n  readonly source?: string;\n\n  // `operationName` is set based on the operation AST, so it is defined even if\n  // no `request.operationName` was passed in.  It will be set to `null` for an\n  // anonymous operation, or if `requestName.operationName` was passed in but\n  // doesn't resolve to an operation in the document.\n  readonly operationName?: string | null;\n  readonly operation?: OperationDefinitionNode;\n\n  /**\n   * Unformatted errors which have occurred during the request. Note that these\n   * are present earlier in the request pipeline and differ from **formatted**\n   * errors which are the result of running the user-configurable `formatError`\n   * transformation function over specific errors.\n   */\n  readonly errors?: ReadonlyArray<GraphQLError>;\n\n  readonly metrics: GraphQLRequestMetrics;\n\n  debug?: boolean;\n}\n\nexport type ValidationRule = (context: ValidationContext) => ASTVisitor;\n\nexport class InvalidGraphQLRequestError extends GraphQLError {}\n\nexport type GraphQLExecutor<TContext = Record<string, any>> = (\n  requestContext: GraphQLRequestContextExecutionDidStart<TContext>,\n) => ValueOrPromise<GraphQLExecutionResult>;\n\nexport type GraphQLExecutionResult = {\n  data?: Record<string, any> | null;\n  errors?: ReadonlyArray<GraphQLError>;\n  extensions?: Record<string, any>;\n};\n\nexport type Logger = {\n  // Ordered from least-severe to most-severe.\n  debug(message?: any): void;\n  info(message?: any): void;\n  warn(message?: any): void;\n  error(message?: any): void;\n}\n\n/**\n * This is an object form of the parameters received by typical\n * `graphql-js` resolvers.  The function type is `GraphQLFieldResolver`\n * and normally uses positional parameters.  In order to facilitate better\n * ergonomics in the Apollo Server plugin API, these have been converted to\n * named properties on the object using their names from the upstream\n * `GraphQLFieldResolver` type signature.  Ergonomic wins, in this case,\n * include not needing to have three unused variables in scope just because\n * there was a need to access the `info` property in a wrapped plugin.\n */\nexport type GraphQLFieldResolverParams<\n  TSource,\n  TContext,\n  TArgs = { [argName: string]: any }\n> = {\n  source: TSource;\n  args: TArgs;\n  context: TContext;\n  info: GraphQLResolveInfo;\n};\n\nexport type GraphQLRequestContextDidResolveSource<TContext> =\n  WithRequired<GraphQLRequestContext<TContext>,\n    | 'metrics'\n    | 'source'\n    | 'queryHash'\n  >;\nexport type GraphQLRequestContextParsingDidStart<TContext> =\n  GraphQLRequestContextDidResolveSource<TContext>;\nexport type GraphQLRequestContextValidationDidStart<TContext> =\n  GraphQLRequestContextParsingDidStart<TContext> &\n  WithRequired<GraphQLRequestContext<TContext>,\n    | 'document'\n  >;\nexport type GraphQLRequestContextDidResolveOperation<TContext> =\n  GraphQLRequestContextValidationDidStart<TContext> &\n  WithRequired<GraphQLRequestContext<TContext>,\n    | 'operation'\n    | 'operationName'\n  >;\nexport type GraphQLRequestContextDidEncounterErrors<TContext> =\n  WithRequired<GraphQLRequestContext<TContext>,\n    | 'metrics'\n    | 'errors'\n  >;\nexport type GraphQLRequestContextResponseForOperation<TContext> =\n  WithRequired<GraphQLRequestContext<TContext>,\n    | 'metrics'\n    | 'source'\n    | 'document'\n    | 'operation'\n    | 'operationName'\n  >;\nexport type GraphQLRequestContextExecutionDidStart<TContext> =\n  GraphQLRequestContextParsingDidStart<TContext> &\n  WithRequired<GraphQLRequestContext<TContext>,\n    | 'document'\n    | 'operation'\n    | 'operationName'\n  >;\nexport type GraphQLRequestContextWillSendResponse<TContext> =\n  GraphQLRequestContextDidResolveSource<TContext> &\n  WithRequired<GraphQLRequestContext<TContext>,\n    | 'metrics'\n    | 'response'\n  >;\n"},"lineCount":null}},"error":null,"hash":"f5104db83dcb654c095e9ec4b06f7bdd","cacheData":{"env":{}}}
{"id":"../node_modules/graphql-tools/dist/stitching/mergeSchemas.js","dependencies":[{"name":"/Users/bilal/Projects/kart-racer/server/node_modules/graphql-tools/dist/stitching/mergeSchemas.js.map","includedInParent":true,"mtime":499162500000},{"name":"/Users/bilal/Projects/kart-racer/server/package.json","includedInParent":true,"mtime":1610848218647},{"name":"/Users/bilal/Projects/kart-racer/server/node_modules/graphql-tools/package.json","includedInParent":true,"mtime":1602017675708},{"name":"graphql","loc":{"line":20,"column":24},"parent":"/Users/bilal/Projects/kart-racer/server/node_modules/graphql-tools/dist/stitching/mergeSchemas.js","resolved":"/Users/bilal/Projects/kart-racer/server/node_modules/graphql/index.mjs"},{"name":"../makeExecutableSchema","loc":{"line":21,"column":37},"parent":"/Users/bilal/Projects/kart-racer/server/node_modules/graphql-tools/dist/stitching/mergeSchemas.js","resolved":"/Users/bilal/Projects/kart-racer/server/node_modules/graphql-tools/dist/makeExecutableSchema.js"},{"name":"./schemaRecreation","loc":{"line":22,"column":33},"parent":"/Users/bilal/Projects/kart-racer/server/node_modules/graphql-tools/dist/stitching/mergeSchemas.js","resolved":"/Users/bilal/Projects/kart-racer/server/node_modules/graphql-tools/dist/stitching/schemaRecreation.js"},{"name":"./delegateToSchema","loc":{"line":23,"column":33},"parent":"/Users/bilal/Projects/kart-racer/server/node_modules/graphql-tools/dist/stitching/mergeSchemas.js","resolved":"/Users/bilal/Projects/kart-racer/server/node_modules/graphql-tools/dist/stitching/delegateToSchema.js"},{"name":"./typeFromAST","loc":{"line":24,"column":28},"parent":"/Users/bilal/Projects/kart-racer/server/node_modules/graphql-tools/dist/stitching/mergeSchemas.js","resolved":"/Users/bilal/Projects/kart-racer/server/node_modules/graphql-tools/dist/stitching/typeFromAST.js"},{"name":"../transforms","loc":{"line":25,"column":27},"parent":"/Users/bilal/Projects/kart-racer/server/node_modules/graphql-tools/dist/stitching/mergeSchemas.js","resolved":"/Users/bilal/Projects/kart-racer/server/node_modules/graphql-tools/dist/transforms/index.js"},{"name":"../mergeDeep","loc":{"line":26,"column":26},"parent":"/Users/bilal/Projects/kart-racer/server/node_modules/graphql-tools/dist/stitching/mergeSchemas.js","resolved":"/Users/bilal/Projects/kart-racer/server/node_modules/graphql-tools/dist/mergeDeep.js"},{"name":"../schemaVisitor","loc":{"line":27,"column":30},"parent":"/Users/bilal/Projects/kart-racer/server/node_modules/graphql-tools/dist/stitching/mergeSchemas.js","resolved":"/Users/bilal/Projects/kart-racer/server/node_modules/graphql-tools/dist/schemaVisitor.js"}],"generated":{"js":"var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __spreadArrays = (this && this.__spreadArrays) || function () {\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\n            r[k] = a[j];\n    return r;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar graphql_1 = require(\"graphql\");\nvar makeExecutableSchema_1 = require(\"../makeExecutableSchema\");\nvar schemaRecreation_1 = require(\"./schemaRecreation\");\nvar delegateToSchema_1 = require(\"./delegateToSchema\");\nvar typeFromAST_1 = require(\"./typeFromAST\");\nvar transforms_1 = require(\"../transforms\");\nvar mergeDeep_1 = require(\"../mergeDeep\");\nvar schemaVisitor_1 = require(\"../schemaVisitor\");\nfunction mergeSchemas(_a) {\n    var schemas = _a.schemas, onTypeConflict = _a.onTypeConflict, resolvers = _a.resolvers, schemaDirectives = _a.schemaDirectives, inheritResolversFromInterfaces = _a.inheritResolversFromInterfaces, mergeDirectives = _a.mergeDirectives;\n    return mergeSchemasImplementation({\n        schemas: schemas,\n        resolvers: resolvers,\n        schemaDirectives: schemaDirectives,\n        inheritResolversFromInterfaces: inheritResolversFromInterfaces,\n        mergeDirectives: mergeDirectives,\n    });\n}\nexports.default = mergeSchemas;\nfunction mergeSchemasImplementation(_a) {\n    var schemas = _a.schemas, resolvers = _a.resolvers, schemaDirectives = _a.schemaDirectives, inheritResolversFromInterfaces = _a.inheritResolversFromInterfaces, mergeDirectives = _a.mergeDirectives;\n    var allSchemas = [];\n    var typeCandidates = {};\n    var types = {};\n    var extensions = [];\n    var directives = [];\n    var fragments = [];\n    var resolveType = schemaRecreation_1.createResolveType(function (name) {\n        if (types[name] === undefined) {\n            throw new Error(\"Can't find type \" + name + \".\");\n        }\n        return types[name];\n    });\n    schemas.forEach(function (schema) {\n        if (schema instanceof graphql_1.GraphQLSchema) {\n            allSchemas.push(schema);\n            var queryType_1 = schema.getQueryType();\n            var mutationType_1 = schema.getMutationType();\n            var subscriptionType_1 = schema.getSubscriptionType();\n            if (queryType_1) {\n                addTypeCandidate(typeCandidates, 'Query', {\n                    schema: schema,\n                    type: queryType_1,\n                });\n            }\n            if (mutationType_1) {\n                addTypeCandidate(typeCandidates, 'Mutation', {\n                    schema: schema,\n                    type: mutationType_1,\n                });\n            }\n            if (subscriptionType_1) {\n                addTypeCandidate(typeCandidates, 'Subscription', {\n                    schema: schema,\n                    type: subscriptionType_1,\n                });\n            }\n            if (mergeDirectives) {\n                var directiveInstances = schema.getDirectives();\n                directiveInstances.forEach(function (directive) {\n                    directives.push(directive);\n                });\n            }\n            var typeMap_1 = schema.getTypeMap();\n            Object.keys(typeMap_1).forEach(function (typeName) {\n                var type = typeMap_1[typeName];\n                if (graphql_1.isNamedType(type) &&\n                    graphql_1.getNamedType(type).name.slice(0, 2) !== '__' &&\n                    type !== queryType_1 &&\n                    type !== mutationType_1 &&\n                    type !== subscriptionType_1) {\n                    addTypeCandidate(typeCandidates, type.name, {\n                        schema: schema,\n                        type: type,\n                    });\n                }\n            });\n        }\n        else if (typeof schema === 'string' ||\n            (schema && schema.kind === graphql_1.Kind.DOCUMENT)) {\n            var parsedSchemaDocument = typeof schema === 'string' ? graphql_1.parse(schema) : schema;\n            parsedSchemaDocument.definitions.forEach(function (def) {\n                var type = typeFromAST_1.default(def);\n                if (type instanceof graphql_1.GraphQLDirective && mergeDirectives) {\n                    directives.push(type);\n                }\n                else if (type && !(type instanceof graphql_1.GraphQLDirective)) {\n                    addTypeCandidate(typeCandidates, type.name, {\n                        type: type,\n                    });\n                }\n            });\n            var extensionsDocument = makeExecutableSchema_1.extractExtensionDefinitions(parsedSchemaDocument);\n            if (extensionsDocument.definitions.length > 0) {\n                extensions.push(extensionsDocument);\n            }\n        }\n        else if (Array.isArray(schema)) {\n            schema.forEach(function (type) {\n                addTypeCandidate(typeCandidates, type.name, {\n                    type: type,\n                });\n            });\n        }\n        else {\n            throw new Error(\"Invalid schema passed\");\n        }\n    });\n    var mergeInfo = createMergeInfo(allSchemas, fragments);\n    if (!resolvers) {\n        resolvers = {};\n    }\n    else if (typeof resolvers === 'function') {\n        console.warn('Passing functions as resolver parameter is deprecated. Use `info.mergeInfo` instead.');\n        resolvers = resolvers(mergeInfo);\n    }\n    else if (Array.isArray(resolvers)) {\n        resolvers = resolvers.reduce(function (left, right) {\n            if (typeof right === 'function') {\n                console.warn('Passing functions as resolver parameter is deprecated. Use `info.mergeInfo` instead.');\n                right = right(mergeInfo);\n            }\n            return mergeDeep_1.default(left, right);\n        }, {});\n    }\n    var generatedResolvers = {};\n    Object.keys(typeCandidates).forEach(function (typeName) {\n        var resultType = defaultVisitType(typeName, typeCandidates[typeName]);\n        if (resultType === null) {\n            types[typeName] = null;\n        }\n        else {\n            var type = void 0;\n            var typeResolvers = void 0;\n            if (graphql_1.isNamedType(resultType)) {\n                type = resultType;\n            }\n            else if (resultType.type) {\n                type = resultType.type;\n                typeResolvers = resultType.resolvers;\n            }\n            else {\n                throw new Error(\"Invalid visitType result for type \" + typeName);\n            }\n            types[typeName] = schemaRecreation_1.recreateType(type, resolveType, false);\n            if (typeResolvers) {\n                generatedResolvers[typeName] = typeResolvers;\n            }\n        }\n    });\n    var mergedSchema = new graphql_1.GraphQLSchema({\n        query: types.Query,\n        mutation: types.Mutation,\n        subscription: types.Subscription,\n        types: Object.keys(types).map(function (key) { return types[key]; }),\n        directives: directives.map(function (directive) { return schemaRecreation_1.recreateDirective(directive, resolveType); })\n    });\n    extensions.forEach(function (extension) {\n        mergedSchema = graphql_1.extendSchema(mergedSchema, extension, {\n            commentDescriptions: true,\n        });\n    });\n    if (!resolvers) {\n        resolvers = {};\n    }\n    else if (Array.isArray(resolvers)) {\n        resolvers = resolvers.reduce(mergeDeep_1.default, {});\n    }\n    Object.keys(resolvers).forEach(function (typeName) {\n        var type = resolvers[typeName];\n        if (type instanceof graphql_1.GraphQLScalarType) {\n            return;\n        }\n        Object.keys(type).forEach(function (fieldName) {\n            var field = type[fieldName];\n            if (field.fragment) {\n                fragments.push({\n                    field: fieldName,\n                    fragment: field.fragment,\n                });\n            }\n        });\n    });\n    mergedSchema = makeExecutableSchema_1.addResolveFunctionsToSchema({\n        schema: mergedSchema,\n        resolvers: mergeDeep_1.default(generatedResolvers, resolvers),\n        inheritResolversFromInterfaces: inheritResolversFromInterfaces\n    });\n    forEachField(mergedSchema, function (field) {\n        if (field.resolve) {\n            var fieldResolver_1 = field.resolve;\n            field.resolve = function (parent, args, context, info) {\n                var newInfo = __assign(__assign({}, info), { mergeInfo: mergeInfo });\n                return fieldResolver_1(parent, args, context, newInfo);\n            };\n        }\n        if (field.subscribe) {\n            var fieldResolver_2 = field.subscribe;\n            field.subscribe = function (parent, args, context, info) {\n                var newInfo = __assign(__assign({}, info), { mergeInfo: mergeInfo });\n                return fieldResolver_2(parent, args, context, newInfo);\n            };\n        }\n    });\n    if (schemaDirectives) {\n        schemaVisitor_1.SchemaDirectiveVisitor.visitSchemaDirectives(mergedSchema, schemaDirectives);\n    }\n    return mergedSchema;\n}\nfunction createMergeInfo(allSchemas, fragments) {\n    return {\n        delegate: function (operation, fieldName, args, context, info, transforms) {\n            console.warn('`mergeInfo.delegate` is deprecated. ' +\n                'Use `mergeInfo.delegateToSchema and pass explicit schema instances.');\n            var schema = guessSchemaByRootField(allSchemas, operation, fieldName);\n            var expandTransforms = new transforms_1.ExpandAbstractTypes(info.schema, schema);\n            var fragmentTransform = new transforms_1.ReplaceFieldWithFragment(schema, fragments);\n            return delegateToSchema_1.default({\n                schema: schema,\n                operation: operation,\n                fieldName: fieldName,\n                args: args,\n                context: context,\n                info: info,\n                transforms: __spreadArrays((transforms || []), [\n                    expandTransforms,\n                    fragmentTransform,\n                ]),\n            });\n        },\n        delegateToSchema: function (options) {\n            return delegateToSchema_1.default(__assign(__assign({}, options), { transforms: options.transforms }));\n        },\n        fragments: fragments\n    };\n}\nfunction guessSchemaByRootField(schemas, operation, fieldName) {\n    for (var _i = 0, schemas_1 = schemas; _i < schemas_1.length; _i++) {\n        var schema = schemas_1[_i];\n        var rootObject = void 0;\n        if (operation === 'subscription') {\n            rootObject = schema.getSubscriptionType();\n        }\n        else if (operation === 'mutation') {\n            rootObject = schema.getMutationType();\n        }\n        else {\n            rootObject = schema.getQueryType();\n        }\n        if (rootObject) {\n            var fields = rootObject.getFields();\n            if (fields[fieldName]) {\n                return schema;\n            }\n        }\n    }\n    throw new Error(\"Could not find subschema with field `\" + operation + \".\" + fieldName + \"`\");\n}\nfunction createDelegatingResolver(schema, operation, fieldName) {\n    return function (root, args, context, info) {\n        return info.mergeInfo.delegateToSchema({\n            schema: schema,\n            operation: operation,\n            fieldName: fieldName,\n            args: args,\n            context: context,\n            info: info,\n        });\n    };\n}\nfunction forEachField(schema, fn) {\n    var typeMap = schema.getTypeMap();\n    Object.keys(typeMap).forEach(function (typeName) {\n        var type = typeMap[typeName];\n        if (!graphql_1.getNamedType(type).name.startsWith('__') &&\n            type instanceof graphql_1.GraphQLObjectType) {\n            var fields_1 = type.getFields();\n            Object.keys(fields_1).forEach(function (fieldName) {\n                var field = fields_1[fieldName];\n                fn(field, typeName, fieldName);\n            });\n        }\n    });\n}\nfunction addTypeCandidate(typeCandidates, name, typeCandidate) {\n    if (!typeCandidates[name]) {\n        typeCandidates[name] = [];\n    }\n    typeCandidates[name].push(typeCandidate);\n}\nfunction defaultVisitType(name, candidates, candidateSelector) {\n    if (!candidateSelector) {\n        candidateSelector = function (cands) { return cands[cands.length - 1]; };\n    }\n    var resolveType = schemaRecreation_1.createResolveType(function (_, type) { return type; });\n    if (name === 'Query' || name === 'Mutation' || name === 'Subscription') {\n        var fields_2 = {};\n        var operationName_1;\n        switch (name) {\n            case 'Query':\n                operationName_1 = 'query';\n                break;\n            case 'Mutation':\n                operationName_1 = 'mutation';\n                break;\n            case 'Subscription':\n                operationName_1 = 'subscription';\n                break;\n            default:\n                break;\n        }\n        var resolvers_1 = {};\n        var resolverKey_1 = operationName_1 === 'subscription' ? 'subscribe' : 'resolve';\n        candidates.forEach(function (_a) {\n            var candidateType = _a.type, schema = _a.schema;\n            var candidateFields = candidateType.getFields();\n            fields_2 = __assign(__assign({}, fields_2), candidateFields);\n            Object.keys(candidateFields).forEach(function (fieldName) {\n                var _a;\n                resolvers_1[fieldName] = (_a = {},\n                    _a[resolverKey_1] = createDelegatingResolver(schema, operationName_1, fieldName),\n                    _a);\n            });\n        });\n        var type = new graphql_1.GraphQLObjectType({\n            name: name,\n            fields: schemaRecreation_1.fieldMapToFieldConfigMap(fields_2, resolveType, false),\n        });\n        return {\n            type: type,\n            resolvers: resolvers_1,\n        };\n    }\n    else {\n        var candidate = candidateSelector(candidates);\n        return candidate.type;\n    }\n}\n"},"sourceMaps":{"js":{"version":3,"file":"mergeSchemas.js","sourceRoot":"","sources":["../../src/stitching/mergeSchemas.ts"],"names":[],"mappings":"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","sourcesContent":[null]}},"error":null,"hash":"11d2f971ed83fdc65eeef7b6b548d567","cacheData":{"env":{}}}
{"id":"../node_modules/graphql-tools/dist/transforms/WrapQuery.js","dependencies":[{"name":"/Users/bilal/Projects/kart-racer/server/node_modules/graphql-tools/dist/transforms/WrapQuery.js.map","includedInParent":true,"mtime":499162500000},{"name":"/Users/bilal/Projects/kart-racer/server/package.json","includedInParent":true,"mtime":1610848218647},{"name":"/Users/bilal/Projects/kart-racer/server/node_modules/graphql-tools/package.json","includedInParent":true,"mtime":1602017675708},{"name":"graphql","loc":{"line":20,"column":24},"parent":"/Users/bilal/Projects/kart-racer/server/node_modules/graphql-tools/dist/transforms/WrapQuery.js","resolved":"/Users/bilal/Projects/kart-racer/server/node_modules/graphql/index.mjs"}],"generated":{"js":"var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __spreadArrays = (this && this.__spreadArrays) || function () {\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\n            r[k] = a[j];\n    return r;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar graphql_1 = require(\"graphql\");\nvar WrapQuery = /** @class */ (function () {\n    function WrapQuery(path, wrapper, extractor) {\n        this.path = path;\n        this.wrapper = wrapper;\n        this.extractor = extractor;\n    }\n    WrapQuery.prototype.transformRequest = function (originalRequest) {\n        var _a;\n        var _this = this;\n        var document = originalRequest.document;\n        var fieldPath = [];\n        var ourPath = JSON.stringify(this.path);\n        var newDocument = graphql_1.visit(document, (_a = {},\n            _a[graphql_1.Kind.FIELD] = {\n                enter: function (node) {\n                    fieldPath.push(node.name.value);\n                    if (ourPath === JSON.stringify(fieldPath)) {\n                        var wrapResult = _this.wrapper(node.selectionSet);\n                        // Selection can be either a single selection or a selection set. If it's just one selection,\n                        // let's wrap it in a selection set. Otherwise, keep it as is.\n                        var selectionSet = wrapResult.kind === graphql_1.Kind.SELECTION_SET\n                            ? wrapResult\n                            : {\n                                kind: graphql_1.Kind.SELECTION_SET,\n                                selections: [wrapResult]\n                            };\n                        return __assign(__assign({}, node), { selectionSet: selectionSet });\n                    }\n                },\n                leave: function (node) {\n                    fieldPath.pop();\n                }\n            },\n            _a));\n        return __assign(__assign({}, originalRequest), { document: newDocument });\n    };\n    WrapQuery.prototype.transformResult = function (originalResult) {\n        var rootData = originalResult.data;\n        if (rootData) {\n            var data = rootData;\n            var path = __spreadArrays(this.path);\n            while (path.length > 1) {\n                var next = path.shift();\n                if (data[next]) {\n                    data = data[next];\n                }\n            }\n            data[path[0]] = this.extractor(data[path[0]]);\n        }\n        return {\n            data: rootData,\n            errors: originalResult.errors\n        };\n    };\n    return WrapQuery;\n}());\nexports.default = WrapQuery;\n"},"sourceMaps":{"js":{"version":3,"file":"WrapQuery.js","sourceRoot":"","sources":["../../src/transforms/WrapQuery.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AAAA,mCAAkF;AAKlF;IAKE,mBAAY,IAAmB,EAAE,OAAqB,EAAE,SAA+B;QACrF,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;QACvB,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;IAC7B,CAAC;IAEM,oCAAgB,GAAvB,UAAwB,eAAwB;;QAAhD,iBAoCC;QAnCC,IAAM,QAAQ,GAAG,eAAe,CAAC,QAAQ,CAAC;QAC1C,IAAM,SAAS,GAAkB,EAAE,CAAC;QACpC,IAAM,OAAO,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAC1C,IAAM,WAAW,GAAG,eAAK,CAAC,QAAQ;YAChC,GAAC,cAAI,CAAC,KAAK,IAAG;gBACZ,KAAK,EAAE,UAAC,IAAe;oBACrB,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;oBAChC,IAAI,OAAO,KAAK,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,EAAE;wBACzC,IAAM,UAAU,GAAG,KAAI,CAAC,OAAO,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;wBAEnD,6FAA6F;wBAC7F,8DAA8D;wBAC9D,IAAM,YAAY,GAChB,UAAU,CAAC,IAAI,KAAK,cAAI,CAAC,aAAa;4BACpC,CAAC,CAAC,UAAU;4BACZ,CAAC,CAAC;gCACE,IAAI,EAAE,cAAI,CAAC,aAAa;gCACxB,UAAU,EAAE,CAAC,UAAU,CAAC;6BACzB,CAAC;wBAER,6BACK,IAAI,KACP,YAAY,cAAA,IACZ;qBACH;gBACH,CAAC;gBACD,KAAK,EAAE,UAAC,IAAe;oBACrB,SAAS,CAAC,GAAG,EAAE,CAAC;gBAClB,CAAC;aACF;gBACD,CAAC;QACH,6BACK,eAAe,KAClB,QAAQ,EAAE,WAAW,IACrB;IACJ,CAAC;IAEM,mCAAe,GAAtB,UAAuB,cAAsB;QAC3C,IAAM,QAAQ,GAAG,cAAc,CAAC,IAAI,CAAC;QACrC,IAAI,QAAQ,EAAE;YACZ,IAAI,IAAI,GAAG,QAAQ,CAAC;YACpB,IAAM,IAAI,kBAAO,IAAI,CAAC,IAAI,CAAC,CAAC;YAC5B,OAAO,IAAI,CAAC,MAAM,GAAG,CAAC,EAAE;gBACtB,IAAM,IAAI,GAAG,IAAI,CAAC,KAAK,EAAE,CAAC;gBAC1B,IAAI,IAAI,CAAC,IAAI,CAAC,EAAE;oBACd,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC;iBACnB;aACF;YACD,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;SAC/C;QAED,OAAO;YACL,IAAI,EAAE,QAAQ;YACd,MAAM,EAAE,cAAc,CAAC,MAAM;SAC9B,CAAC;IACJ,CAAC;IACH,gBAAC;AAAD,CAAC,AApED,IAoEC","sourcesContent":[null]}},"error":null,"hash":"f65cd0221e0a794b0c6864b8d364a2a4","cacheData":{"env":{}}}
{"id":"../node_modules/graphql-tools/dist/mock.js","dependencies":[{"name":"/Users/bilal/Projects/kart-racer/server/node_modules/graphql-tools/dist/mock.js.map","includedInParent":true,"mtime":499162500000},{"name":"/Users/bilal/Projects/kart-racer/server/package.json","includedInParent":true,"mtime":1610848218647},{"name":"/Users/bilal/Projects/kart-racer/server/node_modules/graphql-tools/package.json","includedInParent":true,"mtime":1602017675708},{"name":"graphql","loc":{"line":2,"column":24},"parent":"/Users/bilal/Projects/kart-racer/server/node_modules/graphql-tools/dist/mock.js","resolved":"/Users/bilal/Projects/kart-racer/server/node_modules/graphql/index.mjs"},{"name":"uuid","loc":{"line":3,"column":19},"parent":"/Users/bilal/Projects/kart-racer/server/node_modules/graphql-tools/dist/mock.js","resolved":"/Users/bilal/Projects/kart-racer/server/node_modules/graphql-tools/node_modules/uuid/index.js"},{"name":"./makeExecutableSchema","loc":{"line":4,"column":37},"parent":"/Users/bilal/Projects/kart-racer/server/node_modules/graphql-tools/dist/mock.js","resolved":"/Users/bilal/Projects/kart-racer/server/node_modules/graphql-tools/dist/makeExecutableSchema.js"}],"generated":{"js":"Object.defineProperty(exports, \"__esModule\", { value: true });\nvar graphql_1 = require(\"graphql\");\nvar uuid = require(\"uuid\");\nvar makeExecutableSchema_1 = require(\"./makeExecutableSchema\");\n// This function wraps addMockFunctionsToSchema for more convenience\nfunction mockServer(schema, mocks, preserveResolvers) {\n    if (preserveResolvers === void 0) { preserveResolvers = false; }\n    var mySchema;\n    if (!(schema instanceof graphql_1.GraphQLSchema)) {\n        // TODO: provide useful error messages here if this fails\n        mySchema = makeExecutableSchema_1.buildSchemaFromTypeDefinitions(schema);\n    }\n    else {\n        mySchema = schema;\n    }\n    addMockFunctionsToSchema({ schema: mySchema, mocks: mocks, preserveResolvers: preserveResolvers });\n    return { query: function (query, vars) { return graphql_1.graphql(mySchema, query, {}, {}, vars); } };\n}\nexports.mockServer = mockServer;\nvar defaultMockMap = new Map();\ndefaultMockMap.set('Int', function () { return Math.round(Math.random() * 200) - 100; });\ndefaultMockMap.set('Float', function () { return Math.random() * 200 - 100; });\ndefaultMockMap.set('String', function () { return 'Hello World'; });\ndefaultMockMap.set('Boolean', function () { return Math.random() > 0.5; });\ndefaultMockMap.set('ID', function () { return uuid.v4(); });\n// TODO allow providing a seed such that lengths of list could be deterministic\n// this could be done by using casual to get a random list length if the casual\n// object is global.\nfunction addMockFunctionsToSchema(_a) {\n    var schema = _a.schema, _b = _a.mocks, mocks = _b === void 0 ? {} : _b, _c = _a.preserveResolvers, preserveResolvers = _c === void 0 ? false : _c;\n    if (!schema) {\n        throw new Error('Must provide schema to mock');\n    }\n    if (!(schema instanceof graphql_1.GraphQLSchema)) {\n        throw new Error('Value at \"schema\" must be of type GraphQLSchema');\n    }\n    if (!isObject(mocks)) {\n        throw new Error('mocks must be of type Object');\n    }\n    // use Map internally, because that API is nicer.\n    var mockFunctionMap = new Map();\n    Object.keys(mocks).forEach(function (typeName) {\n        mockFunctionMap.set(typeName, mocks[typeName]);\n    });\n    mockFunctionMap.forEach(function (mockFunction, mockTypeName) {\n        if (typeof mockFunction !== 'function') {\n            throw new Error(\"mockFunctionMap[\" + mockTypeName + \"] must be a function\");\n        }\n    });\n    var mockType = function (type, typeName, fieldName) {\n        // order of precendence for mocking:\n        // 1. if the object passed in already has fieldName, just use that\n        // --> if it's a function, that becomes your resolver\n        // --> if it's a value, the mock resolver will return that\n        // 2. if the nullableType is a list, recurse\n        // 2. if there's a mock defined for this typeName, that will be used\n        // 3. if there's no mock defined, use the default mocks for this type\n        return function (root, args, context, info) {\n            // nullability doesn't matter for the purpose of mocking.\n            var fieldType = graphql_1.getNullableType(type);\n            var namedFieldType = graphql_1.getNamedType(fieldType);\n            if (root && typeof root[fieldName] !== 'undefined') {\n                var result = void 0;\n                // if we're here, the field is already defined\n                if (typeof root[fieldName] === 'function') {\n                    result = root[fieldName](root, args, context, info);\n                    if (result instanceof MockList) {\n                        result = result.mock(root, args, context, info, fieldType, mockType);\n                    }\n                }\n                else {\n                    result = root[fieldName];\n                }\n                // Now we merge the result with the default mock for this type.\n                // This allows overriding defaults while writing very little code.\n                if (mockFunctionMap.has(namedFieldType.name)) {\n                    result = mergeMocks(mockFunctionMap\n                        .get(namedFieldType.name)\n                        .bind(null, root, args, context, info), result);\n                }\n                return result;\n            }\n            if (fieldType instanceof graphql_1.GraphQLList ||\n                fieldType instanceof graphql_1.GraphQLNonNull) {\n                return [\n                    mockType(fieldType.ofType)(root, args, context, info),\n                    mockType(fieldType.ofType)(root, args, context, info),\n                ];\n            }\n            if (mockFunctionMap.has(fieldType.name) &&\n                !(fieldType instanceof graphql_1.GraphQLUnionType ||\n                    fieldType instanceof graphql_1.GraphQLInterfaceType)) {\n                // the object passed doesn't have this field, so we apply the default mock\n                return mockFunctionMap.get(fieldType.name)(root, args, context, info);\n            }\n            if (fieldType instanceof graphql_1.GraphQLObjectType) {\n                // objects don't return actual data, we only need to mock scalars!\n                return {};\n            }\n            // if a mock function is provided for unionType or interfaceType, execute it to resolve the concrete type\n            // otherwise randomly pick a type from all implementation types\n            if (fieldType instanceof graphql_1.GraphQLUnionType ||\n                fieldType instanceof graphql_1.GraphQLInterfaceType) {\n                var implementationType = void 0;\n                if (mockFunctionMap.has(fieldType.name)) {\n                    var interfaceMockObj = mockFunctionMap.get(fieldType.name)(root, args, context, info);\n                    if (!interfaceMockObj || !interfaceMockObj.__typename) {\n                        return Error(\"Please return a __typename in \\\"\" + fieldType.name + \"\\\"\");\n                    }\n                    implementationType = schema.getType(interfaceMockObj.__typename);\n                }\n                else {\n                    var possibleTypes = schema.getPossibleTypes(fieldType);\n                    implementationType = getRandomElement(possibleTypes);\n                }\n                return Object.assign({ __typename: implementationType }, mockType(implementationType)(root, args, context, info));\n            }\n            if (fieldType instanceof graphql_1.GraphQLEnumType) {\n                return getRandomElement(fieldType.getValues()).value;\n            }\n            if (defaultMockMap.has(fieldType.name)) {\n                return defaultMockMap.get(fieldType.name)(root, args, context, info);\n            }\n            // if we get to here, we don't have a value, and we don't have a mock for this type,\n            // we could return undefined, but that would be hard to debug, so we throw instead.\n            // however, we returning it instead of throwing it, so preserveResolvers can handle the failures.\n            return Error(\"No mock defined for type \\\"\" + fieldType.name + \"\\\"\");\n        };\n    };\n    makeExecutableSchema_1.forEachField(schema, function (field, typeName, fieldName) {\n        assignResolveType(field.type, preserveResolvers);\n        var mockResolver;\n        // we have to handle the root mutation and root query types differently,\n        // because no resolver is called at the root.\n        /* istanbul ignore next: Must provide schema DefinitionNode with query type or a type named Query. */\n        var isOnQueryType = schema.getQueryType() && schema.getQueryType().name === typeName;\n        var isOnMutationType = schema.getMutationType() && schema.getMutationType().name === typeName;\n        if (isOnQueryType || isOnMutationType) {\n            if (mockFunctionMap.has(typeName)) {\n                var rootMock_1 = mockFunctionMap.get(typeName);\n                // XXX: BUG in here, need to provide proper signature for rootMock.\n                if (typeof rootMock_1(undefined, {}, {}, {})[fieldName] === 'function') {\n                    mockResolver = function (root, args, context, info) {\n                        var updatedRoot = root || {}; // TODO: should we clone instead?\n                        updatedRoot[fieldName] = rootMock_1(root, args, context, info)[fieldName];\n                        // XXX this is a bit of a hack to still use mockType, which\n                        // lets you mock lists etc. as well\n                        // otherwise we could just set field.resolve to rootMock()[fieldName]\n                        // it's like pretending there was a resolve function that ran before\n                        // the root resolve function.\n                        return mockType(field.type, typeName, fieldName)(updatedRoot, args, context, info);\n                    };\n                }\n            }\n        }\n        if (!mockResolver) {\n            mockResolver = mockType(field.type, typeName, fieldName);\n        }\n        if (!preserveResolvers || !field.resolve) {\n            field.resolve = mockResolver;\n        }\n        else {\n            var oldResolver_1 = field.resolve;\n            field.resolve = function (rootObject, args, context, info) {\n                return Promise.all([\n                    mockResolver(rootObject, args, context, info),\n                    oldResolver_1(rootObject, args, context, info),\n                ]).then(function (values) {\n                    var mockedValue = values[0], resolvedValue = values[1];\n                    // In case we couldn't mock\n                    if (mockedValue instanceof Error) {\n                        // only if value was not resolved, populate the error.\n                        if (undefined === resolvedValue) {\n                            throw mockedValue;\n                        }\n                        return resolvedValue;\n                    }\n                    if (resolvedValue instanceof Date && mockedValue instanceof Date) {\n                        return undefined !== resolvedValue ? resolvedValue : mockedValue;\n                    }\n                    if (isObject(mockedValue) && isObject(resolvedValue)) {\n                        // Object.assign() won't do here, as we need to all properties, including\n                        // the non-enumerable ones and defined using Object.defineProperty\n                        var emptyObject = Object.create(Object.getPrototypeOf(resolvedValue));\n                        return copyOwnProps(emptyObject, resolvedValue, mockedValue);\n                    }\n                    return undefined !== resolvedValue ? resolvedValue : mockedValue;\n                });\n            };\n        }\n    });\n}\nexports.addMockFunctionsToSchema = addMockFunctionsToSchema;\nfunction isObject(thing) {\n    return thing === Object(thing) && !Array.isArray(thing);\n}\n// returns a random element from that ary\nfunction getRandomElement(ary) {\n    var sample = Math.floor(Math.random() * ary.length);\n    return ary[sample];\n}\nfunction mergeObjects(a, b) {\n    return Object.assign(a, b);\n}\nfunction copyOwnPropsIfNotPresent(target, source) {\n    Object.getOwnPropertyNames(source).forEach(function (prop) {\n        if (!Object.getOwnPropertyDescriptor(target, prop)) {\n            Object.defineProperty(target, prop, Object.getOwnPropertyDescriptor(source, prop));\n        }\n    });\n}\nfunction copyOwnProps(target) {\n    var sources = [];\n    for (var _i = 1; _i < arguments.length; _i++) {\n        sources[_i - 1] = arguments[_i];\n    }\n    sources.forEach(function (source) {\n        var chain = source;\n        while (chain) {\n            copyOwnPropsIfNotPresent(target, chain);\n            chain = Object.getPrototypeOf(chain);\n        }\n    });\n    return target;\n}\n// takes either an object or a (possibly nested) array\n// and completes the customMock object with any fields\n// defined on genericMock\n// only merges objects or arrays. Scalars are returned as is\nfunction mergeMocks(genericMockFunction, customMock) {\n    if (Array.isArray(customMock)) {\n        return customMock.map(function (el) { return mergeMocks(genericMockFunction, el); });\n    }\n    if (isObject(customMock)) {\n        return mergeObjects(genericMockFunction(), customMock);\n    }\n    return customMock;\n}\nfunction getResolveType(namedFieldType) {\n    if (namedFieldType instanceof graphql_1.GraphQLInterfaceType ||\n        namedFieldType instanceof graphql_1.GraphQLUnionType) {\n        return namedFieldType.resolveType;\n    }\n    else {\n        return undefined;\n    }\n}\nfunction assignResolveType(type, preserveResolvers) {\n    var fieldType = graphql_1.getNullableType(type);\n    var namedFieldType = graphql_1.getNamedType(fieldType);\n    var oldResolveType = getResolveType(namedFieldType);\n    if (preserveResolvers && oldResolveType && oldResolveType.length) {\n        return;\n    }\n    if (namedFieldType instanceof graphql_1.GraphQLUnionType ||\n        namedFieldType instanceof graphql_1.GraphQLInterfaceType) {\n        // the default `resolveType` always returns null. We add a fallback\n        // resolution that works with how unions and interface are mocked\n        namedFieldType.resolveType = function (data, context, info) {\n            return info.schema.getType(data.__typename);\n        };\n    }\n}\nvar MockList = /** @class */ (function () {\n    // wrappedFunction can return another MockList or a value\n    function MockList(len, wrappedFunction) {\n        this.len = len;\n        if (typeof wrappedFunction !== 'undefined') {\n            if (typeof wrappedFunction !== 'function') {\n                throw new Error('Second argument to MockList must be a function or undefined');\n            }\n            this.wrappedFunction = wrappedFunction;\n        }\n    }\n    MockList.prototype.mock = function (root, args, context, info, fieldType, mockTypeFunc) {\n        var arr;\n        if (Array.isArray(this.len)) {\n            arr = new Array(this.randint(this.len[0], this.len[1]));\n        }\n        else {\n            arr = new Array(this.len);\n        }\n        for (var i = 0; i < arr.length; i++) {\n            if (typeof this.wrappedFunction === 'function') {\n                var res = this.wrappedFunction(root, args, context, info);\n                if (res instanceof MockList) {\n                    var nullableType = graphql_1.getNullableType(fieldType.ofType);\n                    arr[i] = res.mock(root, args, context, info, nullableType, mockTypeFunc);\n                }\n                else {\n                    arr[i] = res;\n                }\n            }\n            else {\n                arr[i] = mockTypeFunc(fieldType.ofType)(root, args, context, info);\n            }\n        }\n        return arr;\n    };\n    MockList.prototype.randint = function (low, high) {\n        return Math.floor(Math.random() * (high - low + 1) + low);\n    };\n    return MockList;\n}());\nexports.MockList = MockList;\n"},"sourceMaps":{"js":{"version":3,"file":"mock.js","sourceRoot":"","sources":["../src/mock.ts"],"names":[],"mappings":"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","sourcesContent":[null]}},"error":null,"hash":"ef08d2baa7ffb11024fe6b049671c30f","cacheData":{"env":{}}}
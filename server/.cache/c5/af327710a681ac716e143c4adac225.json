{"id":"../node_modules/apollo-server/dist/index.js","dependencies":[{"name":"/Users/bilal/Projects/kart-racer/server/node_modules/apollo-server/dist/index.js.map","includedInParent":true,"mtime":499162500000},{"name":"/Users/bilal/Projects/kart-racer/server/node_modules/apollo-server/src/index.ts","includedInParent":true,"mtime":499162500000},{"name":"/Users/bilal/Projects/kart-racer/server/package.json","includedInParent":true,"mtime":1610848218647},{"name":"/Users/bilal/Projects/kart-racer/server/node_modules/apollo-server/package.json","includedInParent":true,"mtime":1602017675700},{"name":"express","loc":{"line":26,"column":42},"parent":"/Users/bilal/Projects/kart-racer/server/node_modules/apollo-server/dist/index.js","resolved":"/Users/bilal/Projects/kart-racer/server/node_modules/express/index.js"},{"name":"http","loc":{"line":27,"column":39},"parent":"/Users/bilal/Projects/kart-racer/server/node_modules/apollo-server/dist/index.js","resolved":"/usr/local/lib/node_modules/parcel/node_modules/stream-http/index.js"},{"name":"apollo-server-express","loc":{"line":28,"column":40},"parent":"/Users/bilal/Projects/kart-racer/server/node_modules/apollo-server/dist/index.js","resolved":"/Users/bilal/Projects/kart-racer/server/node_modules/apollo-server-express/dist/index.js"},{"name":"./exports","loc":{"line":29,"column":21},"parent":"/Users/bilal/Projects/kart-racer/server/node_modules/apollo-server/dist/index.js","resolved":"/Users/bilal/Projects/kart-racer/server/node_modules/apollo-server/dist/exports.js"},{"name":"url","loc":{"line":48,"column":46},"parent":"/Users/bilal/Projects/kart-racer/server/node_modules/apollo-server/dist/index.js","resolved":"/usr/local/lib/node_modules/parcel/node_modules/url/url.js"}],"generated":{"js":"\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !exports.hasOwnProperty(p)) __createBinding(exports, m, p);\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ApolloServer = void 0;\nconst express_1 = __importDefault(require(\"express\"));\nconst http_1 = __importDefault(require(\"http\"));\nconst apollo_server_express_1 = require(\"apollo-server-express\");\n__exportStar(require(\"./exports\"), exports);\nclass ApolloServer extends apollo_server_express_1.ApolloServer {\n    constructor(config) {\n        super(config);\n        this.cors = config && config.cors;\n        this.onHealthCheck = config && config.onHealthCheck;\n    }\n    createServerInfo(server, subscriptionsPath) {\n        const serverInfo = Object.assign(Object.assign({}, server.address()), { server,\n            subscriptionsPath });\n        let hostForUrl = serverInfo.address;\n        if (serverInfo.address === '' || serverInfo.address === '::')\n            hostForUrl = 'localhost';\n        serverInfo.url = require('url').format({\n            protocol: 'http',\n            hostname: hostForUrl,\n            port: serverInfo.port,\n            pathname: this.graphqlPath,\n        });\n        serverInfo.subscriptionsUrl = require('url').format({\n            protocol: 'ws',\n            hostname: hostForUrl,\n            port: serverInfo.port,\n            slashes: true,\n            pathname: subscriptionsPath,\n        });\n        return serverInfo;\n    }\n    applyMiddleware() {\n        throw new Error('To use Apollo Server with an existing express application, please use apollo-server-express');\n    }\n    listen(...opts) {\n        const _super = Object.create(null, {\n            applyMiddleware: { get: () => super.applyMiddleware }\n        });\n        return __awaiter(this, void 0, void 0, function* () {\n            const app = express_1.default();\n            app.disable('x-powered-by');\n            _super.applyMiddleware.call(this, {\n                app,\n                path: '/',\n                bodyParserConfig: { limit: '50mb' },\n                onHealthCheck: this.onHealthCheck,\n                cors: typeof this.cors !== 'undefined'\n                    ? this.cors\n                    : {\n                        origin: '*',\n                    },\n            });\n            const httpServer = http_1.default.createServer(app);\n            this.httpServer = httpServer;\n            if (this.subscriptionServerOptions) {\n                this.installSubscriptionHandlers(httpServer);\n            }\n            yield new Promise(resolve => {\n                httpServer.once('listening', resolve);\n                httpServer.listen(...(opts.length ? opts : [{ port: 4000 }]));\n            });\n            return this.createServerInfo(httpServer, this.subscriptionsPath);\n        });\n    }\n    stop() {\n        const _super = Object.create(null, {\n            stop: { get: () => super.stop }\n        });\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this.httpServer) {\n                const httpServer = this.httpServer;\n                yield new Promise(resolve => httpServer.close(resolve));\n                this.httpServer = undefined;\n            }\n            yield _super.stop.call(this);\n        });\n    }\n}\nexports.ApolloServer = ApolloServer;\n"},"sourceMaps":{"js":{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":"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","sourcesContent":["// Note: express is only used if you use the ApolloServer.listen API to create\n// an express app for you instead of applyMiddleware (which you might not even\n// use with express). The dependency is unused otherwise, so don't worry if\n// you're not using express or your version doesn't quite match up.\nimport express from 'express';\nimport http from 'http';\nimport {\n  ApolloServer as ApolloServerBase,\n  CorsOptions,\n  ApolloServerExpressConfig,\n} from 'apollo-server-express';\n\nexport * from './exports';\n\nexport interface ServerInfo {\n  address: string;\n  family: string;\n  url: string;\n  subscriptionsUrl: string;\n  port: number | string;\n  subscriptionsPath: string;\n  server: http.Server;\n}\n\nexport class ApolloServer extends ApolloServerBase {\n  private httpServer?: http.Server;\n  private cors?: CorsOptions | boolean;\n  private onHealthCheck?: (req: express.Request) => Promise<any>;\n\n  constructor(\n    config: ApolloServerExpressConfig & {\n      cors?: CorsOptions | boolean;\n      onHealthCheck?: (req: express.Request) => Promise<any>;\n    },\n  ) {\n    super(config);\n    this.cors = config && config.cors;\n    this.onHealthCheck = config && config.onHealthCheck;\n  }\n\n  private createServerInfo(\n    server: http.Server,\n    subscriptionsPath?: string,\n  ): ServerInfo {\n    const serverInfo: any = {\n      // TODO: Once we bump to `@types/node@10` or higher, we can replace cast\n      // with the `net.AddressInfo` type, rather than this custom interface.\n      // Unfortunately, prior to the 10.x types, this type existed on `dgram`,\n      // but not on `net`, and in later types, the `server.address()` signature\n      // can also be a string.\n      ...(server.address() as {\n        address: string;\n        family: string;\n        port: number;\n      }),\n      server,\n      subscriptionsPath,\n    };\n\n    // Convert IPs which mean \"any address\" (IPv4 or IPv6) into localhost\n    // corresponding loopback ip. Note that the url field we're setting is\n    // primarily for consumption by our test suite. If this heuristic is wrong\n    // for your use case, explicitly specify a frontend host (in the `host`\n    // option to ApolloServer.listen).\n    let hostForUrl = serverInfo.address;\n    if (serverInfo.address === '' || serverInfo.address === '::')\n      hostForUrl = 'localhost';\n\n    serverInfo.url = require('url').format({\n      protocol: 'http',\n      hostname: hostForUrl,\n      port: serverInfo.port,\n      pathname: this.graphqlPath,\n    });\n\n    serverInfo.subscriptionsUrl = require('url').format({\n      protocol: 'ws',\n      hostname: hostForUrl,\n      port: serverInfo.port,\n      slashes: true,\n      pathname: subscriptionsPath,\n    });\n\n    return serverInfo;\n  }\n\n  public applyMiddleware() {\n    throw new Error(\n      'To use Apollo Server with an existing express application, please use apollo-server-express',\n    );\n  }\n\n  // Listen takes the same arguments as http.Server.listen.\n  public async listen(...opts: Array<any>): Promise<ServerInfo> {\n    // This class is the easy mode for people who don't create their own express\n    // object, so we have to create it.\n    const app = express();\n\n    app.disable('x-powered-by');\n\n    // provide generous values for the getting started experience\n    super.applyMiddleware({\n      app,\n      path: '/',\n      bodyParserConfig: { limit: '50mb' },\n      onHealthCheck: this.onHealthCheck,\n      cors:\n        typeof this.cors !== 'undefined'\n          ? this.cors\n          : {\n              origin: '*',\n            },\n    });\n\n    const httpServer = http.createServer(app);\n    this.httpServer = httpServer;\n\n    if (this.subscriptionServerOptions) {\n      this.installSubscriptionHandlers(httpServer);\n    }\n\n    await new Promise(resolve => {\n      httpServer.once('listening', resolve);\n      // If the user passed a callback to listen, it'll get called in addition\n      // to our resolver. They won't have the ability to get the ServerInfo\n      // object unless they use our Promise, though.\n      httpServer.listen(...(opts.length ? opts : [{ port: 4000 }]));\n    });\n\n    return this.createServerInfo(httpServer, this.subscriptionsPath);\n  }\n\n  public async stop() {\n    if (this.httpServer) {\n      const httpServer = this.httpServer;\n      await new Promise(resolve => httpServer.close(resolve));\n      this.httpServer = undefined;\n    }\n    await super.stop();\n  }\n}\n"]}},"error":null,"hash":"985f82879e92434cdf07e22cc4fd018a","cacheData":{"env":{}}}
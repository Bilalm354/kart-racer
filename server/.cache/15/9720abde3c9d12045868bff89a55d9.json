{"id":"../node_modules/encodeurl/index.js","dependencies":[{"name":"/Users/bilal/Projects/kart-racer/server/package.json","includedInParent":true,"mtime":1610848218647},{"name":"/Users/bilal/Projects/kart-racer/server/node_modules/encodeurl/package.json","includedInParent":true,"mtime":1602017675801}],"generated":{"js":"/*!\n * encodeurl\n * Copyright(c) 2016 Douglas Christopher Wilson\n * MIT Licensed\n */\n'use strict';\n/**\n * Module exports.\n * @public\n */\n\nmodule.exports = encodeUrl;\n/**\n * RegExp to match non-URL code points, *after* encoding (i.e. not including \"%\")\n * and including invalid escape sequences.\n * @private\n */\n\nvar ENCODE_CHARS_REGEXP = /(?:[^\\x21\\x25\\x26-\\x3B\\x3D\\x3F-\\x5B\\x5D\\x5F\\x61-\\x7A\\x7E]|%(?:[^0-9A-Fa-f]|[0-9A-Fa-f][^0-9A-Fa-f]|$))+/g;\n/**\n * RegExp to match unmatched surrogate pair.\n * @private\n */\n\nvar UNMATCHED_SURROGATE_PAIR_REGEXP = /(^|[^\\uD800-\\uDBFF])[\\uDC00-\\uDFFF]|[\\uD800-\\uDBFF]([^\\uDC00-\\uDFFF]|$)/g;\n/**\n * String to replace unmatched surrogate pair with.\n * @private\n */\n\nvar UNMATCHED_SURROGATE_PAIR_REPLACE = '$1\\uFFFD$2';\n/**\n * Encode a URL to a percent-encoded form, excluding already-encoded sequences.\n *\n * This function will take an already-encoded URL and encode all the non-URL\n * code points. This function will not encode the \"%\" character unless it is\n * not part of a valid sequence (`%20` will be left as-is, but `%foo` will\n * be encoded as `%25foo`).\n *\n * This encode is meant to be \"safe\" and does not throw errors. It will try as\n * hard as it can to properly encode the given URL, including replacing any raw,\n * unpaired surrogate pairs with the Unicode replacement character prior to\n * encoding.\n *\n * @param {string} url\n * @return {string}\n * @public\n */\n\nfunction encodeUrl(url) {\n  return String(url).replace(UNMATCHED_SURROGATE_PAIR_REGEXP, UNMATCHED_SURROGATE_PAIR_REPLACE).replace(ENCODE_CHARS_REGEXP, encodeURI);\n}"},"sourceMaps":{"js":{"mappings":[{"generated":{"line":1,"column":0},"source":"../node_modules/encodeurl/index.js","original":{"line":1,"column":0}},{"generated":{"line":6,"column":0},"source":"../node_modules/encodeurl/index.js","original":{"line":7,"column":0}},{"generated":{"line":7,"column":0},"source":"../node_modules/encodeurl/index.js","original":{"line":9,"column":0}},{"name":"module","generated":{"line":12,"column":0},"source":"../node_modules/encodeurl/index.js","original":{"line":14,"column":0}},{"generated":{"line":12,"column":6},"source":"../node_modules/encodeurl/index.js","original":{"line":14,"column":6}},{"name":"exports","generated":{"line":12,"column":7},"source":"../node_modules/encodeurl/index.js","original":{"line":14,"column":7}},{"generated":{"line":12,"column":14},"source":"../node_modules/encodeurl/index.js","original":{"line":14,"column":0}},{"name":"encodeUrl","generated":{"line":12,"column":17},"source":"../node_modules/encodeurl/index.js","original":{"line":14,"column":17}},{"generated":{"line":12,"column":26},"source":"../node_modules/encodeurl/index.js","original":{"line":14,"column":0}},{"generated":{"line":13,"column":0},"source":"../node_modules/encodeurl/index.js","original":{"line":16,"column":0}},{"generated":{"line":19,"column":0},"source":"../node_modules/encodeurl/index.js","original":{"line":22,"column":0}},{"name":"ENCODE_CHARS_REGEXP","generated":{"line":19,"column":4},"source":"../node_modules/encodeurl/index.js","original":{"line":22,"column":4}},{"generated":{"line":19,"column":23},"source":"../node_modules/encodeurl/index.js","original":{"line":22,"column":23}},{"generated":{"line":19,"column":26},"source":"../node_modules/encodeurl/index.js","original":{"line":22,"column":26}},{"generated":{"line":19,"column":132},"source":"../node_modules/encodeurl/index.js","original":{"line":22,"column":0}},{"generated":{"line":20,"column":0},"source":"../node_modules/encodeurl/index.js","original":{"line":24,"column":0}},{"generated":{"line":25,"column":0},"source":"../node_modules/encodeurl/index.js","original":{"line":29,"column":0}},{"name":"UNMATCHED_SURROGATE_PAIR_REGEXP","generated":{"line":25,"column":4},"source":"../node_modules/encodeurl/index.js","original":{"line":29,"column":4}},{"generated":{"line":25,"column":35},"source":"../node_modules/encodeurl/index.js","original":{"line":29,"column":35}},{"generated":{"line":25,"column":38},"source":"../node_modules/encodeurl/index.js","original":{"line":29,"column":38}},{"generated":{"line":25,"column":112},"source":"../node_modules/encodeurl/index.js","original":{"line":29,"column":0}},{"generated":{"line":26,"column":0},"source":"../node_modules/encodeurl/index.js","original":{"line":31,"column":0}},{"generated":{"line":31,"column":0},"source":"../node_modules/encodeurl/index.js","original":{"line":36,"column":0}},{"name":"UNMATCHED_SURROGATE_PAIR_REPLACE","generated":{"line":31,"column":4},"source":"../node_modules/encodeurl/index.js","original":{"line":36,"column":4}},{"generated":{"line":31,"column":36},"source":"../node_modules/encodeurl/index.js","original":{"line":36,"column":36}},{"generated":{"line":31,"column":39},"source":"../node_modules/encodeurl/index.js","original":{"line":36,"column":39}},{"generated":{"line":31,"column":51},"source":"../node_modules/encodeurl/index.js","original":{"line":36,"column":0}},{"generated":{"line":32,"column":0},"source":"../node_modules/encodeurl/index.js","original":{"line":38,"column":0}},{"generated":{"line":50,"column":0},"source":"../node_modules/encodeurl/index.js","original":{"line":56,"column":0}},{"name":"encodeUrl","generated":{"line":50,"column":9},"source":"../node_modules/encodeurl/index.js","original":{"line":56,"column":9}},{"generated":{"line":50,"column":18},"source":"../node_modules/encodeurl/index.js","original":{"line":56,"column":0}},{"name":"url","generated":{"line":50,"column":19},"source":"../node_modules/encodeurl/index.js","original":{"line":56,"column":20}},{"generated":{"line":50,"column":22},"source":"../node_modules/encodeurl/index.js","original":{"line":56,"column":0}},{"generated":{"line":50,"column":24},"source":"../node_modules/encodeurl/index.js","original":{"line":56,"column":25}},{"generated":{"line":51,"column":0},"source":"../node_modules/encodeurl/index.js","original":{"line":57,"column":2}},{"name":"String","generated":{"line":51,"column":9},"source":"../node_modules/encodeurl/index.js","original":{"line":57,"column":9}},{"generated":{"line":51,"column":15},"source":"../node_modules/encodeurl/index.js","original":{"line":57,"column":15}},{"name":"url","generated":{"line":51,"column":16},"source":"../node_modules/encodeurl/index.js","original":{"line":57,"column":16}},{"generated":{"line":51,"column":19},"source":"../node_modules/encodeurl/index.js","original":{"line":57,"column":15}},{"generated":{"line":51,"column":20},"source":"../node_modules/encodeurl/index.js","original":{"line":57,"column":9}},{"name":"replace","generated":{"line":51,"column":21},"source":"../node_modules/encodeurl/index.js","original":{"line":58,"column":5}},{"generated":{"line":51,"column":28},"source":"../node_modules/encodeurl/index.js","original":{"line":57,"column":9}},{"name":"UNMATCHED_SURROGATE_PAIR_REGEXP","generated":{"line":51,"column":29},"source":"../node_modules/encodeurl/index.js","original":{"line":58,"column":13}},{"generated":{"line":51,"column":60},"source":"../node_modules/encodeurl/index.js","original":{"line":57,"column":9}},{"name":"UNMATCHED_SURROGATE_PAIR_REPLACE","generated":{"line":51,"column":62},"source":"../node_modules/encodeurl/index.js","original":{"line":58,"column":46}},{"generated":{"line":51,"column":94},"source":"../node_modules/encodeurl/index.js","original":{"line":57,"column":9}},{"name":"replace","generated":{"line":51,"column":96},"source":"../node_modules/encodeurl/index.js","original":{"line":59,"column":5}},{"generated":{"line":51,"column":103},"source":"../node_modules/encodeurl/index.js","original":{"line":57,"column":9}},{"name":"ENCODE_CHARS_REGEXP","generated":{"line":51,"column":104},"source":"../node_modules/encodeurl/index.js","original":{"line":59,"column":13}},{"generated":{"line":51,"column":123},"source":"../node_modules/encodeurl/index.js","original":{"line":57,"column":9}},{"name":"encodeURI","generated":{"line":51,"column":125},"source":"../node_modules/encodeurl/index.js","original":{"line":59,"column":34}},{"generated":{"line":51,"column":134},"source":"../node_modules/encodeurl/index.js","original":{"line":57,"column":9}},{"generated":{"line":51,"column":135},"source":"../node_modules/encodeurl/index.js","original":{"line":57,"column":2}},{"generated":{"line":52,"column":0},"source":"../node_modules/encodeurl/index.js","original":{"line":60,"column":1}}],"sources":{"../node_modules/encodeurl/index.js":"/*!\n * encodeurl\n * Copyright(c) 2016 Douglas Christopher Wilson\n * MIT Licensed\n */\n\n'use strict'\n\n/**\n * Module exports.\n * @public\n */\n\nmodule.exports = encodeUrl\n\n/**\n * RegExp to match non-URL code points, *after* encoding (i.e. not including \"%\")\n * and including invalid escape sequences.\n * @private\n */\n\nvar ENCODE_CHARS_REGEXP = /(?:[^\\x21\\x25\\x26-\\x3B\\x3D\\x3F-\\x5B\\x5D\\x5F\\x61-\\x7A\\x7E]|%(?:[^0-9A-Fa-f]|[0-9A-Fa-f][^0-9A-Fa-f]|$))+/g\n\n/**\n * RegExp to match unmatched surrogate pair.\n * @private\n */\n\nvar UNMATCHED_SURROGATE_PAIR_REGEXP = /(^|[^\\uD800-\\uDBFF])[\\uDC00-\\uDFFF]|[\\uD800-\\uDBFF]([^\\uDC00-\\uDFFF]|$)/g\n\n/**\n * String to replace unmatched surrogate pair with.\n * @private\n */\n\nvar UNMATCHED_SURROGATE_PAIR_REPLACE = '$1\\uFFFD$2'\n\n/**\n * Encode a URL to a percent-encoded form, excluding already-encoded sequences.\n *\n * This function will take an already-encoded URL and encode all the non-URL\n * code points. This function will not encode the \"%\" character unless it is\n * not part of a valid sequence (`%20` will be left as-is, but `%foo` will\n * be encoded as `%25foo`).\n *\n * This encode is meant to be \"safe\" and does not throw errors. It will try as\n * hard as it can to properly encode the given URL, including replacing any raw,\n * unpaired surrogate pairs with the Unicode replacement character prior to\n * encoding.\n *\n * @param {string} url\n * @return {string}\n * @public\n */\n\nfunction encodeUrl (url) {\n  return String(url)\n    .replace(UNMATCHED_SURROGATE_PAIR_REGEXP, UNMATCHED_SURROGATE_PAIR_REPLACE)\n    .replace(ENCODE_CHARS_REGEXP, encodeURI)\n}\n"},"lineCount":null}},"error":null,"hash":"f964bed025fa188bc980081861d59ae0","cacheData":{"env":{}}}
{"id":"../node_modules/apollo-server-core/dist/types.js","dependencies":[{"name":"/Users/bilal/Projects/kart-racer/server/node_modules/apollo-server-core/dist/types.js.map","includedInParent":true,"mtime":499162500000},{"name":"/Users/bilal/Projects/kart-racer/server/node_modules/apollo-server-core/src/types.ts","includedInParent":true,"mtime":499162500000},{"name":"/Users/bilal/Projects/kart-racer/server/package.json","includedInParent":true,"mtime":1610848218647},{"name":"/Users/bilal/Projects/kart-racer/server/node_modules/apollo-server-core/package.json","includedInParent":true,"mtime":1602017675709},{"name":"graphql-extensions","loc":{"line":3,"column":35},"parent":"/Users/bilal/Projects/kart-racer/server/node_modules/apollo-server-core/dist/types.js","resolved":"/Users/bilal/Projects/kart-racer/server/node_modules/graphql-extensions/dist/index.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar graphql_extensions_1 = require(\"graphql-extensions\");\n\nObject.defineProperty(exports, \"GraphQLExtension\", {\n  enumerable: true,\n  get: function () {\n    return graphql_extensions_1.GraphQLExtension;\n  }\n});"},"sourceMaps":{"js":{"mappings":[{"source":"../src/types.ts","name":null,"original":{"line":21,"column":0},"generated":{"line":7,"column":0}},{"source":"../src/types.ts","name":null,"original":{"line":21,"column":0},"generated":{"line":7,"column":4}},{"source":"../src/types.ts","name":null,"original":{"line":21,"column":0},"generated":{"line":7,"column":24}},{"source":"../src/types.ts","name":null,"original":{"line":21,"column":0},"generated":{"line":7,"column":27}},{"source":"../src/types.ts","name":null,"original":{"line":21,"column":0},"generated":{"line":7,"column":34}},{"source":"../src/types.ts","name":null,"original":{"line":21,"column":0},"generated":{"line":7,"column":35}},{"source":"../src/types.ts","name":null,"original":{"line":21,"column":0},"generated":{"line":7,"column":55}},{"source":"../src/types.ts","name":null,"original":{"line":21,"column":0},"generated":{"line":7,"column":56}},{"source":"../src/types.ts","name":null,"original":{"line":21,"column":9},"generated":{"line":9,"column":0}},{"source":"../src/types.ts","name":null,"original":{"line":21,"column":9},"generated":{"line":9,"column":6}},{"source":"../src/types.ts","name":null,"original":{"line":21,"column":9},"generated":{"line":9,"column":7}},{"source":"../src/types.ts","name":null,"original":{"line":21,"column":9},"generated":{"line":9,"column":21}},{"source":"../src/types.ts","name":null,"original":{"line":21,"column":9},"generated":{"line":9,"column":22}},{"source":"../src/types.ts","name":null,"original":{"line":21,"column":9},"generated":{"line":9,"column":29}},{"source":"../src/types.ts","name":null,"original":{"line":21,"column":9},"generated":{"line":9,"column":31}},{"source":"../src/types.ts","name":null,"original":{"line":21,"column":9},"generated":{"line":9,"column":49}},{"source":"../src/types.ts","name":null,"original":{"line":21,"column":9},"generated":{"line":9,"column":51}},{"source":"../src/types.ts","name":null,"original":{"line":21,"column":9},"generated":{"line":10,"column":0}},{"source":"../src/types.ts","name":null,"original":{"line":21,"column":9},"generated":{"line":10,"column":2}},{"source":"../src/types.ts","name":null,"original":{"line":21,"column":9},"generated":{"line":10,"column":12}},{"source":"../src/types.ts","name":null,"original":{"line":21,"column":9},"generated":{"line":10,"column":14}},{"source":"../src/types.ts","name":null,"original":{"line":21,"column":9},"generated":{"line":10,"column":18}},{"source":"../src/types.ts","name":null,"original":{"line":21,"column":9},"generated":{"line":11,"column":0}},{"source":"../src/types.ts","name":null,"original":{"line":21,"column":9},"generated":{"line":11,"column":2}},{"source":"../src/types.ts","name":null,"original":{"line":21,"column":9},"generated":{"line":11,"column":5}},{"source":"../src/types.ts","name":null,"original":{"line":21,"column":9},"generated":{"line":11,"column":7}},{"source":"../src/types.ts","name":null,"original":{"line":21,"column":9},"generated":{"line":11,"column":19}},{"source":"../src/types.ts","name":null,"original":{"line":21,"column":9},"generated":{"line":12,"column":0}},{"source":"../src/types.ts","name":null,"original":{"line":21,"column":9},"generated":{"line":12,"column":11}},{"source":"../src/types.ts","name":null,"original":{"line":21,"column":9},"generated":{"line":12,"column":31}},{"source":"../src/types.ts","name":null,"original":{"line":21,"column":9},"generated":{"line":12,"column":32}},{"source":"../src/types.ts","name":null,"original":{"line":21,"column":9},"generated":{"line":12,"column":48}},{"source":"../src/types.ts","name":null,"original":{"line":21,"column":25},"generated":{"line":13,"column":0}},{"source":"../src/types.ts","name":null,"original":{"line":21,"column":9},"generated":{"line":14,"column":0}},{"source":"../src/types.ts","name":null,"original":{"line":21,"column":9},"generated":{"line":14,"column":1}}],"sources":{"../src/types.ts":"import { GraphQLSchema, DocumentNode } from 'graphql';\nimport {\n  SchemaDirectiveVisitor,\n  IResolvers,\n  IMocks,\n  GraphQLParseOptions,\n} from 'graphql-tools';\nimport {\n  ApolloConfig,\n  ValueOrPromise,\n  GraphQLExecutor,\n  GraphQLExecutionResult,\n  GraphQLRequestContextExecutionDidStart,\n  ApolloConfigInput,\n} from 'apollo-server-types';\nimport { ConnectionContext } from 'subscriptions-transport-ws';\n// The types for `ws` use `export = WebSocket`, so we'll use the\n// matching `import =` to bring in its sole export.\nimport WebSocket = require('ws');\nimport { GraphQLExtension } from 'graphql-extensions';\nexport { GraphQLExtension } from 'graphql-extensions';\n\nimport { PlaygroundConfig } from './playground';\nexport { PlaygroundConfig, PlaygroundRenderPageOptions } from './playground';\n\nimport {\n  GraphQLServerOptions as GraphQLOptions,\n  PersistedQueryOptions,\n} from './graphqlOptions';\nimport { CacheControlExtensionOptions } from 'apollo-cache-control';\nimport { ApolloServerPlugin } from 'apollo-server-plugin-base';\n\nimport { GraphQLSchemaModule } from '@apollographql/apollo-tools';\nimport type { EngineReportingOptions } from './plugin';\nexport { GraphQLSchemaModule };\n\nexport { KeyValueCache } from 'apollo-server-caching';\n\nexport type Context<T = object> = T;\nexport type ContextFunction<FunctionParams = any, ProducedContext = object> = (\n  context: FunctionParams,\n) => ValueOrPromise<Context<ProducedContext>>;\n\n// A plugin can return an interface that matches `ApolloServerPlugin`, or a\n// factory function that returns `ApolloServerPlugin`.\nexport type PluginDefinition = ApolloServerPlugin | (() => ApolloServerPlugin);\n\nexport interface SubscriptionServerOptions {\n  path: string;\n  keepAlive?: number;\n  onConnect?: (\n    connectionParams: Object,\n    websocket: WebSocket,\n    context: ConnectionContext,\n  ) => any;\n  onDisconnect?: (websocket: WebSocket, context: ConnectionContext) => any;\n}\n\ntype BaseConfig = Pick<\n  GraphQLOptions<Context>,\n  | 'formatError'\n  | 'debug'\n  | 'rootValue'\n  | 'validationRules'\n  | 'executor'\n  | 'formatResponse'\n  | 'fieldResolver'\n  | 'tracing'\n  | 'dataSources'\n  | 'cache'\n  | 'logger'\n>;\n\nexport type Unsubscriber = () => void;\nexport type SchemaChangeCallback = (schema: GraphQLSchema) => void;\n\nexport type GraphQLServiceConfig = {\n  schema: GraphQLSchema;\n  executor: GraphQLExecutor;\n};\n\n/**\n * This is an older format for the data that now lives in ApolloConfig.\n */\nexport type GraphQLServiceEngineConfig = {\n  apiKeyHash: string;\n  graphId: string;\n  graphVariant?: string;\n};\n\nexport interface GraphQLService {\n  load(options: {\n    apollo?: ApolloConfig,\n    engine?: GraphQLServiceEngineConfig;  // deprecated; use `apollo` instead\n  }): Promise<GraphQLServiceConfig>;\n  onSchemaChange(callback: SchemaChangeCallback): Unsubscriber;\n  // Note: The `TContext` typing here is not conclusively behaving as we expect:\n  // https://github.com/apollographql/apollo-server/pull/3811#discussion_r387381605\n  executor<TContext>(\n    requestContext: GraphQLRequestContextExecutionDidStart<TContext>,\n  ): ValueOrPromise<GraphQLExecutionResult>;\n}\n\n// This configuration is shared between all integrations and should include\n// fields that are not specific to a single integration\nexport interface Config extends BaseConfig {\n  modules?: GraphQLSchemaModule[];\n  typeDefs?: DocumentNode | Array<DocumentNode> | string | Array<string>;\n  parseOptions?: GraphQLParseOptions;\n  resolvers?: IResolvers | Array<IResolvers>;\n  schema?: GraphQLSchema;\n  schemaDirectives?: Record<string, typeof SchemaDirectiveVisitor>;\n  context?: Context | ContextFunction;\n  introspection?: boolean;\n  mocks?: boolean | IMocks;\n  mockEntireSchema?: boolean;\n  extensions?: Array<() => GraphQLExtension>;\n  cacheControl?: CacheControlExtensionOptions | boolean;\n  plugins?: PluginDefinition[];\n  persistedQueries?: PersistedQueryOptions | false;\n  subscriptions?: Partial<SubscriptionServerOptions> | string | false;\n  //https://github.com/jaydenseric/graphql-upload#type-uploadoptions\n  uploads?: boolean | FileUploadOptions;\n  playground?: PlaygroundConfig;\n  gateway?: GraphQLService;\n  experimental_approximateDocumentStoreMiB?: number;\n  stopOnTerminationSignals?: boolean;\n  apollo?: ApolloConfigInput;\n  // deprecated; see https://go.apollo.dev/s/migration-engine-plugins\n  engine?: boolean | EngineReportingOptions<Context>;\n}\n\n// Configuration for how Apollo Server talks to the Apollo registry.\nexport interface FileUploadOptions {\n  //Max allowed non-file multipart form field size in bytes; enough for your queries (default: 1 MB).\n  maxFieldSize?: number;\n  //Max allowed file size in bytes (default: Infinity).\n  maxFileSize?: number;\n  //Max allowed number of files (default: Infinity).\n  maxFiles?: number;\n}\n"},"lineCount":null}},"error":null,"hash":"0f71d5568f0c73c122af8f402d430b0e","cacheData":{"env":{}}}
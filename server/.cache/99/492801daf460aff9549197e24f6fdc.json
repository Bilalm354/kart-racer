{"id":"../../../../../../usr/local/lib/node_modules/parcel/node_modules/public-encrypt/mgf.js","dependencies":[{"name":"/Users/bilal/Projects/kart-racer/server/package.json","includedInParent":true,"mtime":1610848218647},{"name":"/usr/local/lib/node_modules/parcel/node_modules/public-encrypt/package.json","includedInParent":true,"mtime":1601226823295},{"name":"create-hash","loc":{"line":1,"column":25},"parent":"/usr/local/lib/node_modules/parcel/node_modules/public-encrypt/mgf.js","resolved":"/usr/local/lib/node_modules/parcel/node_modules/create-hash/browser.js"},{"name":"safe-buffer","loc":{"line":2,"column":21},"parent":"/usr/local/lib/node_modules/parcel/node_modules/public-encrypt/mgf.js","resolved":"/usr/local/lib/node_modules/parcel/node_modules/safe-buffer/index.js"}],"generated":{"js":"\nvar createHash = require('create-hash')\nvar Buffer = require('safe-buffer').Buffer\n\nmodule.exports = function (seed, len) {\n  var t = Buffer.alloc(0)\n  var i = 0\n  var c\n  while (t.length < len) {\n    c = i2ops(i++)\n    t = Buffer.concat([t, createHash('sha1').update(seed).update(c).digest()])\n  }\n  return t.slice(0, len)\n}\n\nfunction i2ops (c) {\n  var out = Buffer.allocUnsafe(4)\n  out.writeUInt32BE(c, 0)\n  return out\n}\n"},"sourceMaps":{"js":{"mappings":[{"source":"../../../../../../usr/local/lib/node_modules/parcel/node_modules/public-encrypt/mgf.js","original":{"line":1,"column":0},"generated":{"line":2,"column":0}},{"source":"../../../../../../usr/local/lib/node_modules/parcel/node_modules/public-encrypt/mgf.js","original":{"line":2,"column":0},"generated":{"line":3,"column":0}},{"source":"../../../../../../usr/local/lib/node_modules/parcel/node_modules/public-encrypt/mgf.js","original":{"line":3,"column":0},"generated":{"line":4,"column":0}},{"source":"../../../../../../usr/local/lib/node_modules/parcel/node_modules/public-encrypt/mgf.js","original":{"line":4,"column":0},"generated":{"line":5,"column":0}},{"source":"../../../../../../usr/local/lib/node_modules/parcel/node_modules/public-encrypt/mgf.js","original":{"line":5,"column":0},"generated":{"line":6,"column":0}},{"source":"../../../../../../usr/local/lib/node_modules/parcel/node_modules/public-encrypt/mgf.js","original":{"line":6,"column":0},"generated":{"line":7,"column":0}},{"source":"../../../../../../usr/local/lib/node_modules/parcel/node_modules/public-encrypt/mgf.js","original":{"line":7,"column":0},"generated":{"line":8,"column":0}},{"source":"../../../../../../usr/local/lib/node_modules/parcel/node_modules/public-encrypt/mgf.js","original":{"line":8,"column":0},"generated":{"line":9,"column":0}},{"source":"../../../../../../usr/local/lib/node_modules/parcel/node_modules/public-encrypt/mgf.js","original":{"line":9,"column":0},"generated":{"line":10,"column":0}},{"source":"../../../../../../usr/local/lib/node_modules/parcel/node_modules/public-encrypt/mgf.js","original":{"line":10,"column":0},"generated":{"line":11,"column":0}},{"source":"../../../../../../usr/local/lib/node_modules/parcel/node_modules/public-encrypt/mgf.js","original":{"line":11,"column":0},"generated":{"line":12,"column":0}},{"source":"../../../../../../usr/local/lib/node_modules/parcel/node_modules/public-encrypt/mgf.js","original":{"line":12,"column":0},"generated":{"line":13,"column":0}},{"source":"../../../../../../usr/local/lib/node_modules/parcel/node_modules/public-encrypt/mgf.js","original":{"line":13,"column":0},"generated":{"line":14,"column":0}},{"source":"../../../../../../usr/local/lib/node_modules/parcel/node_modules/public-encrypt/mgf.js","original":{"line":14,"column":0},"generated":{"line":15,"column":0}},{"source":"../../../../../../usr/local/lib/node_modules/parcel/node_modules/public-encrypt/mgf.js","original":{"line":15,"column":0},"generated":{"line":16,"column":0}},{"source":"../../../../../../usr/local/lib/node_modules/parcel/node_modules/public-encrypt/mgf.js","original":{"line":16,"column":0},"generated":{"line":17,"column":0}},{"source":"../../../../../../usr/local/lib/node_modules/parcel/node_modules/public-encrypt/mgf.js","original":{"line":17,"column":0},"generated":{"line":18,"column":0}},{"source":"../../../../../../usr/local/lib/node_modules/parcel/node_modules/public-encrypt/mgf.js","original":{"line":18,"column":0},"generated":{"line":19,"column":0}},{"source":"../../../../../../usr/local/lib/node_modules/parcel/node_modules/public-encrypt/mgf.js","original":{"line":19,"column":0},"generated":{"line":20,"column":0}},{"source":"../../../../../../usr/local/lib/node_modules/parcel/node_modules/public-encrypt/mgf.js","original":{"line":20,"column":0},"generated":{"line":21,"column":0}}],"sources":{"../../../../../../usr/local/lib/node_modules/parcel/node_modules/public-encrypt/mgf.js":"var createHash = require('create-hash')\nvar Buffer = require('safe-buffer').Buffer\n\nmodule.exports = function (seed, len) {\n  var t = Buffer.alloc(0)\n  var i = 0\n  var c\n  while (t.length < len) {\n    c = i2ops(i++)\n    t = Buffer.concat([t, createHash('sha1').update(seed).update(c).digest()])\n  }\n  return t.slice(0, len)\n}\n\nfunction i2ops (c) {\n  var out = Buffer.allocUnsafe(4)\n  out.writeUInt32BE(c, 0)\n  return out\n}\n"},"lineCount":21}},"error":null,"hash":"3f1a4b5e691258465087496f32536160","cacheData":{"env":{}}}